{"ast":null,"code":"import emailjs from '@emailjs/browser';\nimport { getLoyaltyTier, getUpsellOpportunities, getProfitOptimizationRecommendations, generateFeeReport, calculateFeeSavings, getRecommendations } from './pricing';\n\n// Initialize EmailJS with your public key\nemailjs.init(process.env.REACT_APP_EMAILJS_PUBLIC_KEY);\n\n/**\r\n * Send an email using EmailJS\r\n * @param {Object} data - The email data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.subject - Email subject\r\n * @param {string} data.message - Email message content\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\nexport const sendEmail = async data => {\n  try {\n    const templateParams = {\n      to_email: data.to_email,\n      subject: data.subject,\n      message: data.message\n    };\n    const response = await emailjs.send(process.env.REACT_APP_EMAILJS_SERVICE_ID, process.env.REACT_APP_EMAILJS_TEMPLATE_ID, templateParams);\n    return response;\n  } catch (error) {\n    console.error('Error sending email:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Send personalized pricing recommendations email\r\n * @param {Object} data - Customer and pricing data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.customerName - Customer's name\r\n * @param {Array} data.products - Current products\r\n * @param {number} data.totalSpend - Total customer spend\r\n * @param {number} data.monthlyVolume - Monthly transaction volume\r\n * @param {string} data.commitmentLevel - Current commitment level\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\nexport const sendPricingRecommendations = async data => {\n  try {\n    const loyaltyTier = getLoyaltyTier(data.totalSpend);\n    const upsellOpportunities = getUpsellOpportunities(data.products, data.commitmentLevel, data.totalSpend);\n    const profitRecommendations = getProfitOptimizationRecommendations(data.products, data.commitmentLevel, data.totalSpend);\n    const feeReport = generateFeeReport({\n      amount: data.totalSpend\n    }, data.monthlyVolume, data.totalSpend);\n    const feeSavings = calculateFeeSavings({\n      amount: data.totalSpend\n    }, data.monthlyVolume, data.totalSpend);\n    const recommendations = getRecommendations(data.products, feeReport.serviceFee, data.commitmentLevel, feeReport.profitBeforeTax, data.totalSpend, data.monthlyVolume);\n    const message = `\n      Dear ${data.customerName},\n\n      We've analyzed your account and have some personalized recommendations to help you optimize your costs and maximize benefits:\n\n      Current Status:\n      - Loyalty Tier: ${loyaltyTier.name}\n      - Total Spend: $${data.totalSpend.toFixed(2)}\n      - Monthly Volume: $${data.monthlyVolume.toFixed(2)}\n\n      Fee Analysis:\n      ${feeReport.summary}\n\n      Potential Savings:\n      ${feeSavings.summary}\n\n      Recommended Actions:\n      ${recommendations.map(rec => `- ${rec}`).join('\\n')}\n\n      Upsell Opportunities:\n      ${upsellOpportunities.map(opp => `- ${opp.name}: ${opp.description}`).join('\\n')}\n\n      Profit Optimization:\n      ${profitRecommendations.map(rec => `- ${rec}`).join('\\n')}\n\n      Would you like to discuss any of these recommendations in detail? Our team is ready to help you implement these optimizations.\n\n      Best regards,\n      Your Pricing Optimization Team\n    `;\n    return await sendEmail({\n      to_email: data.to_email,\n      subject: `Personalized Pricing Recommendations for ${data.customerName}`,\n      message\n    });\n  } catch (error) {\n    console.error('Error sending pricing recommendations:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Send commitment optimization email\r\n * @param {Object} data - Customer and commitment data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.customerName - Customer's name\r\n * @param {string} data.currentCommitment - Current commitment level\r\n * @param {string} data.recommendedCommitment - Recommended commitment level\r\n * @param {Object} data.savings - Potential savings details\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\nexport const sendCommitmentOptimization = async data => {\n  try {\n    const message = `\n      Dear ${data.customerName},\n\n      We've identified an opportunity to optimize your commitment level and increase your savings:\n\n      Current Commitment: ${data.currentCommitment}\n      Recommended Commitment: ${data.recommendedCommitment}\n\n      Potential Benefits:\n      - Annual Savings: $${data.savings.annual.toFixed(2)}\n      - Processing Fee Savings: $${data.savings.processingFees.toFixed(2)}\n      - Service Fee Savings: $${data.savings.serviceFees.toFixed(2)}\n      - Additional Benefits: ${data.savings.additionalBenefits.join(', ')}\n\n      Would you like to discuss upgrading your commitment level? Our team is available to help you make this transition smoothly.\n\n      Best regards,\n      Your Commitment Optimization Team\n    `;\n    return await sendEmail({\n      to_email: data.to_email,\n      subject: `Commitment Optimization Opportunity for ${data.customerName}`,\n      message\n    });\n  } catch (error) {\n    console.error('Error sending commitment optimization:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["emailjs","getLoyaltyTier","getUpsellOpportunities","getProfitOptimizationRecommendations","generateFeeReport","calculateFeeSavings","getRecommendations","init","process","env","REACT_APP_EMAILJS_PUBLIC_KEY","sendEmail","data","templateParams","to_email","subject","message","response","send","REACT_APP_EMAILJS_SERVICE_ID","REACT_APP_EMAILJS_TEMPLATE_ID","error","console","sendPricingRecommendations","loyaltyTier","totalSpend","upsellOpportunities","products","commitmentLevel","profitRecommendations","feeReport","amount","monthlyVolume","feeSavings","recommendations","serviceFee","profitBeforeTax","customerName","name","toFixed","summary","map","rec","join","opp","description","sendCommitmentOptimization","currentCommitment","recommendedCommitment","savings","annual","processingFees","serviceFees","additionalBenefits"],"sources":["C:/Users/Hasan/Desktop/vscode/etcalc/src/utils/emailService.js"],"sourcesContent":["import emailjs from '@emailjs/browser';\r\nimport { \r\n  getLoyaltyTier, \r\n  getUpsellOpportunities, \r\n  getProfitOptimizationRecommendations,\r\n  generateFeeReport,\r\n  calculateFeeSavings,\r\n  getRecommendations\r\n} from './pricing';\r\n\r\n// Initialize EmailJS with your public key\r\nemailjs.init(process.env.REACT_APP_EMAILJS_PUBLIC_KEY);\r\n\r\n/**\r\n * Send an email using EmailJS\r\n * @param {Object} data - The email data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.subject - Email subject\r\n * @param {string} data.message - Email message content\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\r\nexport const sendEmail = async (data) => {\r\n  try {\r\n    const templateParams = {\r\n      to_email: data.to_email,\r\n      subject: data.subject,\r\n      message: data.message,\r\n    };\r\n\r\n    const response = await emailjs.send(\r\n      process.env.REACT_APP_EMAILJS_SERVICE_ID,\r\n      process.env.REACT_APP_EMAILJS_TEMPLATE_ID,\r\n      templateParams\r\n    );\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error sending email:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Send personalized pricing recommendations email\r\n * @param {Object} data - Customer and pricing data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.customerName - Customer's name\r\n * @param {Array} data.products - Current products\r\n * @param {number} data.totalSpend - Total customer spend\r\n * @param {number} data.monthlyVolume - Monthly transaction volume\r\n * @param {string} data.commitmentLevel - Current commitment level\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\r\nexport const sendPricingRecommendations = async (data) => {\r\n  try {\r\n    const loyaltyTier = getLoyaltyTier(data.totalSpend);\r\n    const upsellOpportunities = getUpsellOpportunities(\r\n      data.products,\r\n      data.commitmentLevel,\r\n      data.totalSpend\r\n    );\r\n    const profitRecommendations = getProfitOptimizationRecommendations(\r\n      data.products,\r\n      data.commitmentLevel,\r\n      data.totalSpend\r\n    );\r\n    const feeReport = generateFeeReport(\r\n      { amount: data.totalSpend },\r\n      data.monthlyVolume,\r\n      data.totalSpend\r\n    );\r\n    const feeSavings = calculateFeeSavings(\r\n      { amount: data.totalSpend },\r\n      data.monthlyVolume,\r\n      data.totalSpend\r\n    );\r\n    const recommendations = getRecommendations(\r\n      data.products,\r\n      feeReport.serviceFee,\r\n      data.commitmentLevel,\r\n      feeReport.profitBeforeTax,\r\n      data.totalSpend,\r\n      data.monthlyVolume\r\n    );\r\n\r\n    const message = `\r\n      Dear ${data.customerName},\r\n\r\n      We've analyzed your account and have some personalized recommendations to help you optimize your costs and maximize benefits:\r\n\r\n      Current Status:\r\n      - Loyalty Tier: ${loyaltyTier.name}\r\n      - Total Spend: $${data.totalSpend.toFixed(2)}\r\n      - Monthly Volume: $${data.monthlyVolume.toFixed(2)}\r\n\r\n      Fee Analysis:\r\n      ${feeReport.summary}\r\n\r\n      Potential Savings:\r\n      ${feeSavings.summary}\r\n\r\n      Recommended Actions:\r\n      ${recommendations.map(rec => `- ${rec}`).join('\\n')}\r\n\r\n      Upsell Opportunities:\r\n      ${upsellOpportunities.map(opp => `- ${opp.name}: ${opp.description}`).join('\\n')}\r\n\r\n      Profit Optimization:\r\n      ${profitRecommendations.map(rec => `- ${rec}`).join('\\n')}\r\n\r\n      Would you like to discuss any of these recommendations in detail? Our team is ready to help you implement these optimizations.\r\n\r\n      Best regards,\r\n      Your Pricing Optimization Team\r\n    `;\r\n\r\n    return await sendEmail({\r\n      to_email: data.to_email,\r\n      subject: `Personalized Pricing Recommendations for ${data.customerName}`,\r\n      message\r\n    });\r\n  } catch (error) {\r\n    console.error('Error sending pricing recommendations:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Send commitment optimization email\r\n * @param {Object} data - Customer and commitment data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.customerName - Customer's name\r\n * @param {string} data.currentCommitment - Current commitment level\r\n * @param {string} data.recommendedCommitment - Recommended commitment level\r\n * @param {Object} data.savings - Potential savings details\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\r\nexport const sendCommitmentOptimization = async (data) => {\r\n  try {\r\n    const message = `\r\n      Dear ${data.customerName},\r\n\r\n      We've identified an opportunity to optimize your commitment level and increase your savings:\r\n\r\n      Current Commitment: ${data.currentCommitment}\r\n      Recommended Commitment: ${data.recommendedCommitment}\r\n\r\n      Potential Benefits:\r\n      - Annual Savings: $${data.savings.annual.toFixed(2)}\r\n      - Processing Fee Savings: $${data.savings.processingFees.toFixed(2)}\r\n      - Service Fee Savings: $${data.savings.serviceFees.toFixed(2)}\r\n      - Additional Benefits: ${data.savings.additionalBenefits.join(', ')}\r\n\r\n      Would you like to discuss upgrading your commitment level? Our team is available to help you make this transition smoothly.\r\n\r\n      Best regards,\r\n      Your Commitment Optimization Team\r\n    `;\r\n\r\n    return await sendEmail({\r\n      to_email: data.to_email,\r\n      subject: `Commitment Optimization Opportunity for ${data.customerName}`,\r\n      message\r\n    });\r\n  } catch (error) {\r\n    console.error('Error sending commitment optimization:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}