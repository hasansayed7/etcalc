{"ast":null,"code":"// Constants for financial calculations\nexport const FINANCIAL_CONSTANTS = {\n  ANNUAL_DISCOUNT_RATE: 0.03,\n  INDUSTRY_AVG_SERVICE_FEE: 100,\n  SERVICE_FEE_THRESHOLD_LOW: 0.8,\n  SERVICE_FEE_THRESHOLD_HIGH: 1.2,\n  TAX_RATE: 0.13,\n  DEFAULT_MARGIN: 0.35,\n  MIN_MARGIN: 0.20,\n  TARGET_MARGIN: 0.35,\n  HIGH_MARGIN: 0.40,\n  MIN_PROFIT_THRESHOLD: 200,\n  MIN_SERVICE_FEE: 100,\n  // Volume discount tiers\n  VOLUME_DISCOUNTS: [{\n    minQty: 5,\n    discount: 0.05\n  },\n  // 5% off for 5+ units\n  {\n    minQty: 10,\n    discount: 0.10\n  },\n  // 10% off for 10+ units\n  {\n    minQty: 20,\n    discount: 0.15\n  },\n  // 15% off for 20+ units\n  {\n    minQty: 50,\n    discount: 0.20\n  } // 20% off for 50+ units\n  ],\n  // Seasonal pricing periods\n  SEASONAL_PRICING: {\n    Q1: {\n      name: \"New Year Special\",\n      discount: 0.10,\n      months: [0, 1, 2]\n    },\n    // Jan-Mar\n    Q2: {\n      name: \"Spring Promotion\",\n      discount: 0.05,\n      months: [3, 4, 5]\n    },\n    // Apr-Jun\n    Q3: {\n      name: \"Summer Sale\",\n      discount: 0.15,\n      months: [6, 7, 8]\n    },\n    // Jul-Sep\n    Q4: {\n      name: \"Year-End Deal\",\n      discount: 0.20,\n      months: [9, 10, 11]\n    } // Oct-Dec\n  }\n};\n\n/**\r\n * Calculate volume discount based on quantity\r\n * @param {number} qty - Quantity\r\n * @returns {number} Discount percentage (0-1)\r\n */\nexport const calculateVolumeDiscount = qty => {\n  const applicableDiscount = FINANCIAL_CONSTANTS.VOLUME_DISCOUNTS.filter(tier => qty >= tier.minQty).sort((a, b) => b.discount - a.discount)[0];\n  return applicableDiscount ? applicableDiscount.discount : 0;\n};\n\n/**\r\n * Get current seasonal pricing period\r\n * @returns {Object} Seasonal pricing period info\r\n */\nexport const getCurrentSeasonalPricing = () => {\n  const currentMonth = new Date().getMonth();\n  return Object.values(FINANCIAL_CONSTANTS.SEASONAL_PRICING).find(period => period.months.includes(currentMonth)) || {\n    name: \"Standard Pricing\",\n    discount: 0\n  };\n};\n\n/**\r\n * Get pricing data for a product based on quantity\r\n * @param {Object} product - Product object\r\n * @param {number} qty - Quantity\r\n * @returns {Object} Pricing slab data with discounts applied\r\n * @throws {Error} If product or quantity is invalid\r\n */\nexport const getPricingData = (product, qty) => {\n  if (!product || !product.pricingSlabs) {\n    throw new Error('Invalid product data');\n  }\n  if (!Number.isInteger(qty) || qty < 1) {\n    throw new Error('Quantity must be a positive integer');\n  }\n\n  // Validate pricing slabs\n  product.pricingSlabs.forEach(slab => {\n    if (slab.unitCost < 0) {\n      throw new Error(`Invalid unit cost (${slab.unitCost}) for product ${product.name}`);\n    }\n    if (slab.margin < FINANCIAL_CONSTANTS.MIN_MARGIN) {\n      throw new Error(`Margin (${slab.margin}) below minimum threshold for product ${product.name}`);\n    }\n  });\n  const slab = product.pricingSlabs.find(slab => qty >= slab.minQty && qty <= slab.maxQty) || product.pricingSlabs[product.pricingSlabs.length - 1];\n\n  // Calculate discounts\n  const volumeDiscount = calculateVolumeDiscount(qty);\n  const seasonalPricing = getCurrentSeasonalPricing();\n  const totalDiscount = Math.min(volumeDiscount + seasonalPricing.discount, 0.30); // Cap total discount at 30%\n\n  // Apply discounts to recommended price\n  const discountedPrice = slab.recommendedPrice * (1 - totalDiscount);\n  return {\n    ...slab,\n    recommendedPrice: formatCurrency(discountedPrice),\n    volumeDiscount,\n    seasonalDiscount: seasonalPricing.discount,\n    totalDiscount,\n    seasonalPeriod: seasonalPricing.name\n  };\n};\n\n/**\r\n * Get package name based on number of products\r\n * @param {Array} products - Array of products\r\n * @returns {string} Package name\r\n */\nexport const getPackageName = products => {\n  if (!Array.isArray(products)) {\n    throw new Error('Invalid products array');\n  }\n  return products.length >= 2 ? \"Backup Total\" : \"Backup Basic\";\n};\n\n/**\r\n * Calculate total cost with proper decimal handling\r\n * @param {number} amount - Amount to format\r\n * @returns {number} Formatted amount with 2 decimal places\r\n */\nexport const formatCurrency = amount => {\n  if (typeof amount !== 'number' || isNaN(amount)) {\n    throw new Error('Invalid amount for currency formatting');\n  }\n  if (!isFinite(amount)) {\n    throw new Error('Amount must be a finite number');\n  }\n  return Number(Math.round(amount + 'e2') + 'e-2');\n};\n\n/**\r\n * Get business recommendations based on current configuration\r\n * @param {Array} products - Array of selected products\r\n * @param {number} serviceCharge - Service charge amount\r\n * @param {string} billingCycle - Billing cycle (monthly/annual)\r\n * @param {number} profitBeforeTax - Profit before tax\r\n * @returns {Array} Array of recommendations\r\n */\nexport const getRecommendations = (products, serviceCharge, billingCycle, profitBeforeTax) => {\n  if (!Array.isArray(products) || typeof serviceCharge !== 'number' || !['monthly', 'annual'].includes(billingCycle) || typeof profitBeforeTax !== 'number') {\n    throw new Error('Invalid input parameters');\n  }\n  const recommendations = [];\n  const selectedCategories = products.map(p => p.category);\n  const currentSeason = getCurrentSeasonalPricing();\n\n  // Add seasonal pricing recommendation\n  if (currentSeason.discount > 0) {\n    recommendations.push(`Take advantage of our ${currentSeason.name} with ${(currentSeason.discount * 100).toFixed(0)}% off!`);\n  }\n\n  // Volume discount recommendations\n  products.forEach(p => {\n    const nextVolumeTier = FINANCIAL_CONSTANTS.VOLUME_DISCOUNTS.find(tier => tier.minQty > p.qty);\n    if (nextVolumeTier) {\n      const additionalQty = nextVolumeTier.minQty - p.qty;\n      const potentialDiscount = nextVolumeTier.discount;\n      recommendations.push(`Add ${additionalQty} more ${p.name} units to qualify for ${(potentialDiscount * 100).toFixed(0)}% volume discount.`);\n    }\n  });\n\n  // 1. Margin improvement\n  const lowMarginProducts = products.filter(p => getPricingData(p, p.qty).margin < FINANCIAL_CONSTANTS.TARGET_MARGIN);\n  if (lowMarginProducts.length > 0) {\n    lowMarginProducts.forEach(p => {\n      const currentMargin = getPricingData(p, p.qty).margin;\n      recommendations.push(`Increase the margin for \"${p.name}\" (currently ${(currentMargin * 100).toFixed(1)}%) to at least ${(FINANCIAL_CONSTANTS.TARGET_MARGIN * 100).toFixed(1)}% to improve profitability.`);\n    });\n  }\n\n  // 2. Upsell higher-margin products\n  const highMarginProducts = products.filter(p => getPricingData(p, p.qty).margin >= FINANCIAL_CONSTANTS.HIGH_MARGIN);\n  if (highMarginProducts.length > 0) {\n    highMarginProducts.forEach(p => {\n      const margin = getPricingData(p, p.qty).margin;\n      recommendations.push(`Focus on upselling \"${p.name}\" (margin ${(margin * 100).toFixed(1)}%) for better profit.`);\n    });\n  }\n\n  // 3. Bundle services\n  if (products.length > 1) {\n    const bundleDiscount = FINANCIAL_CONSTANTS.ANNUAL_DISCOUNT_RATE * 100;\n    recommendations.push(`Bundle multiple products/services for a more attractive offer. Consider offering a ${bundleDiscount}% discount for annual commitments.`);\n  }\n\n  // 4. Service charge review\n  if (serviceCharge < FINANCIAL_CONSTANTS.MIN_SERVICE_FEE) {\n    recommendations.push(`Consider increasing your Professional Services & Support fee to at least $${FINANCIAL_CONSTANTS.MIN_SERVICE_FEE}/year to match industry averages.`);\n  }\n\n  // 5. Profitability check\n  if (profitBeforeTax < 0) {\n    recommendations.push(\"Warning: Your current configuration is not profitable. Review your pricing and costs.\");\n  } else if (profitBeforeTax < FINANCIAL_CONSTANTS.MIN_PROFIT_THRESHOLD) {\n    recommendations.push(`Your profit ($${profitBeforeTax.toFixed(2)}) is below the recommended threshold of $${FINANCIAL_CONSTANTS.MIN_PROFIT_THRESHOLD}. Consider increasing margins or service fees, or reducing costs.`);\n  } else {\n    recommendations.push(`Your configuration is profitable ($${profitBeforeTax.toFixed(2)}). Look for further upsell opportunities or cost optimizations.`);\n  }\n\n  // 6. Complementary product recommendations\n  const complementaryCategories = {\n    Desktop: [\"Server\", \"SaaS\"],\n    Server: [\"SaaS\", \"Virtual Server\"],\n    \"Virtual Server\": [\"SaaS\"],\n    SaaS: [\"Server\", \"Virtual Server\"]\n  };\n  const missingCategories = Object.entries(complementaryCategories).filter(([category]) => selectedCategories.includes(category)).flatMap(([, compCategories]) => compCategories.filter(cat => !selectedCategories.includes(cat))).filter((cat, index, self) => self.indexOf(cat) === index);\n  if (missingCategories.length > 0) {\n    const suggestedProduct = products.find(p => missingCategories.includes(p.category));\n    if (suggestedProduct) {\n      const potentialRevenue = formatCurrency(suggestedProduct.pricingSlabs[0].recommendedPrice * 5);\n      const annualRevenue = billingCycle === 'annual' ? formatCurrency(potentialRevenue * 12) : potentialRevenue;\n      recommendations.push(`Enhance your solution by adding a \"${suggestedProduct.category}\" product like \"${suggestedProduct.name}\". ` + `This can provide a more comprehensive backup strategy and increase your revenue by approximately $${annualRevenue} ${billingCycle === 'annual' ? 'per year' : 'per month'} for 5 units.`);\n    }\n  }\n  return recommendations;\n};","map":{"version":3,"names":["FINANCIAL_CONSTANTS","ANNUAL_DISCOUNT_RATE","INDUSTRY_AVG_SERVICE_FEE","SERVICE_FEE_THRESHOLD_LOW","SERVICE_FEE_THRESHOLD_HIGH","TAX_RATE","DEFAULT_MARGIN","MIN_MARGIN","TARGET_MARGIN","HIGH_MARGIN","MIN_PROFIT_THRESHOLD","MIN_SERVICE_FEE","VOLUME_DISCOUNTS","minQty","discount","SEASONAL_PRICING","Q1","name","months","Q2","Q3","Q4","calculateVolumeDiscount","qty","applicableDiscount","filter","tier","sort","a","b","getCurrentSeasonalPricing","currentMonth","Date","getMonth","Object","values","find","period","includes","getPricingData","product","pricingSlabs","Error","Number","isInteger","forEach","slab","unitCost","margin","maxQty","length","volumeDiscount","seasonalPricing","totalDiscount","Math","min","discountedPrice","recommendedPrice","formatCurrency","seasonalDiscount","seasonalPeriod","getPackageName","products","Array","isArray","amount","isNaN","isFinite","round","getRecommendations","serviceCharge","billingCycle","profitBeforeTax","recommendations","selectedCategories","map","p","category","currentSeason","push","toFixed","nextVolumeTier","additionalQty","potentialDiscount","lowMarginProducts","currentMargin","highMarginProducts","bundleDiscount","complementaryCategories","Desktop","Server","SaaS","missingCategories","entries","flatMap","compCategories","cat","index","self","indexOf","suggestedProduct","potentialRevenue","annualRevenue"],"sources":["C:/Users/Hasan/Desktop/vscode/etcalc/src/utils/pricing.js"],"sourcesContent":["// Constants for financial calculations\r\nexport const FINANCIAL_CONSTANTS = {\r\n  ANNUAL_DISCOUNT_RATE: 0.03,\r\n  INDUSTRY_AVG_SERVICE_FEE: 100,\r\n  SERVICE_FEE_THRESHOLD_LOW: 0.8,\r\n  SERVICE_FEE_THRESHOLD_HIGH: 1.2,\r\n  TAX_RATE: 0.13,\r\n  DEFAULT_MARGIN: 0.35,\r\n  MIN_MARGIN: 0.20,\r\n  TARGET_MARGIN: 0.35,\r\n  HIGH_MARGIN: 0.40,\r\n  MIN_PROFIT_THRESHOLD: 200,\r\n  MIN_SERVICE_FEE: 100,\r\n  // Volume discount tiers\r\n  VOLUME_DISCOUNTS: [\r\n    { minQty: 5, discount: 0.05 },  // 5% off for 5+ units\r\n    { minQty: 10, discount: 0.10 }, // 10% off for 10+ units\r\n    { minQty: 20, discount: 0.15 }, // 15% off for 20+ units\r\n    { minQty: 50, discount: 0.20 }  // 20% off for 50+ units\r\n  ],\r\n  // Seasonal pricing periods\r\n  SEASONAL_PRICING: {\r\n    Q1: { name: \"New Year Special\", discount: 0.10, months: [0, 1, 2] },    // Jan-Mar\r\n    Q2: { name: \"Spring Promotion\", discount: 0.05, months: [3, 4, 5] },    // Apr-Jun\r\n    Q3: { name: \"Summer Sale\", discount: 0.15, months: [6, 7, 8] },         // Jul-Sep\r\n    Q4: { name: \"Year-End Deal\", discount: 0.20, months: [9, 10, 11] }      // Oct-Dec\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate volume discount based on quantity\r\n * @param {number} qty - Quantity\r\n * @returns {number} Discount percentage (0-1)\r\n */\r\nexport const calculateVolumeDiscount = (qty) => {\r\n  const applicableDiscount = FINANCIAL_CONSTANTS.VOLUME_DISCOUNTS\r\n    .filter(tier => qty >= tier.minQty)\r\n    .sort((a, b) => b.discount - a.discount)[0];\r\n  \r\n  return applicableDiscount ? applicableDiscount.discount : 0;\r\n};\r\n\r\n/**\r\n * Get current seasonal pricing period\r\n * @returns {Object} Seasonal pricing period info\r\n */\r\nexport const getCurrentSeasonalPricing = () => {\r\n  const currentMonth = new Date().getMonth();\r\n  return Object.values(FINANCIAL_CONSTANTS.SEASONAL_PRICING)\r\n    .find(period => period.months.includes(currentMonth)) || \r\n    { name: \"Standard Pricing\", discount: 0 };\r\n};\r\n\r\n/**\r\n * Get pricing data for a product based on quantity\r\n * @param {Object} product - Product object\r\n * @param {number} qty - Quantity\r\n * @returns {Object} Pricing slab data with discounts applied\r\n * @throws {Error} If product or quantity is invalid\r\n */\r\nexport const getPricingData = (product, qty) => {\r\n  if (!product || !product.pricingSlabs) {\r\n    throw new Error('Invalid product data');\r\n  }\r\n  \r\n  if (!Number.isInteger(qty) || qty < 1) {\r\n    throw new Error('Quantity must be a positive integer');\r\n  }\r\n\r\n  // Validate pricing slabs\r\n  product.pricingSlabs.forEach(slab => {\r\n    if (slab.unitCost < 0) {\r\n      throw new Error(`Invalid unit cost (${slab.unitCost}) for product ${product.name}`);\r\n    }\r\n    if (slab.margin < FINANCIAL_CONSTANTS.MIN_MARGIN) {\r\n      throw new Error(`Margin (${slab.margin}) below minimum threshold for product ${product.name}`);\r\n    }\r\n  });\r\n\r\n  const slab = product.pricingSlabs.find(\r\n    slab => qty >= slab.minQty && qty <= slab.maxQty\r\n  ) || product.pricingSlabs[product.pricingSlabs.length - 1];\r\n\r\n  // Calculate discounts\r\n  const volumeDiscount = calculateVolumeDiscount(qty);\r\n  const seasonalPricing = getCurrentSeasonalPricing();\r\n  const totalDiscount = Math.min(volumeDiscount + seasonalPricing.discount, 0.30); // Cap total discount at 30%\r\n\r\n  // Apply discounts to recommended price\r\n  const discountedPrice = slab.recommendedPrice * (1 - totalDiscount);\r\n\r\n  return {\r\n    ...slab,\r\n    recommendedPrice: formatCurrency(discountedPrice),\r\n    volumeDiscount,\r\n    seasonalDiscount: seasonalPricing.discount,\r\n    totalDiscount,\r\n    seasonalPeriod: seasonalPricing.name\r\n  };\r\n};\r\n\r\n/**\r\n * Get package name based on number of products\r\n * @param {Array} products - Array of products\r\n * @returns {string} Package name\r\n */\r\nexport const getPackageName = (products) => {\r\n  if (!Array.isArray(products)) {\r\n    throw new Error('Invalid products array');\r\n  }\r\n  return products.length >= 2 ? \"Backup Total\" : \"Backup Basic\";\r\n};\r\n\r\n/**\r\n * Calculate total cost with proper decimal handling\r\n * @param {number} amount - Amount to format\r\n * @returns {number} Formatted amount with 2 decimal places\r\n */\r\nexport const formatCurrency = (amount) => {\r\n  if (typeof amount !== 'number' || isNaN(amount)) {\r\n    throw new Error('Invalid amount for currency formatting');\r\n  }\r\n  if (!isFinite(amount)) {\r\n    throw new Error('Amount must be a finite number');\r\n  }\r\n  return Number(Math.round(amount + 'e2') + 'e-2');\r\n};\r\n\r\n/**\r\n * Get business recommendations based on current configuration\r\n * @param {Array} products - Array of selected products\r\n * @param {number} serviceCharge - Service charge amount\r\n * @param {string} billingCycle - Billing cycle (monthly/annual)\r\n * @param {number} profitBeforeTax - Profit before tax\r\n * @returns {Array} Array of recommendations\r\n */\r\nexport const getRecommendations = (products, serviceCharge, billingCycle, profitBeforeTax) => {\r\n  if (!Array.isArray(products) || typeof serviceCharge !== 'number' || \r\n      !['monthly', 'annual'].includes(billingCycle) || typeof profitBeforeTax !== 'number') {\r\n    throw new Error('Invalid input parameters');\r\n  }\r\n\r\n  const recommendations = [];\r\n  const selectedCategories = products.map(p => p.category);\r\n  const currentSeason = getCurrentSeasonalPricing();\r\n\r\n  // Add seasonal pricing recommendation\r\n  if (currentSeason.discount > 0) {\r\n    recommendations.push(\r\n      `Take advantage of our ${currentSeason.name} with ${(currentSeason.discount * 100).toFixed(0)}% off!`\r\n    );\r\n  }\r\n\r\n  // Volume discount recommendations\r\n  products.forEach(p => {\r\n    const nextVolumeTier = FINANCIAL_CONSTANTS.VOLUME_DISCOUNTS\r\n      .find(tier => tier.minQty > p.qty);\r\n    \r\n    if (nextVolumeTier) {\r\n      const additionalQty = nextVolumeTier.minQty - p.qty;\r\n      const potentialDiscount = nextVolumeTier.discount;\r\n      recommendations.push(\r\n        `Add ${additionalQty} more ${p.name} units to qualify for ${(potentialDiscount * 100).toFixed(0)}% volume discount.`\r\n      );\r\n    }\r\n  });\r\n\r\n  // 1. Margin improvement\r\n  const lowMarginProducts = products.filter(p => getPricingData(p, p.qty).margin < FINANCIAL_CONSTANTS.TARGET_MARGIN);\r\n  if (lowMarginProducts.length > 0) {\r\n    lowMarginProducts.forEach(p => {\r\n      const currentMargin = getPricingData(p, p.qty).margin;\r\n      recommendations.push(\r\n        `Increase the margin for \"${p.name}\" (currently ${(currentMargin * 100).toFixed(1)}%) to at least ${(FINANCIAL_CONSTANTS.TARGET_MARGIN * 100).toFixed(1)}% to improve profitability.`\r\n      );\r\n    });\r\n  }\r\n\r\n  // 2. Upsell higher-margin products\r\n  const highMarginProducts = products.filter(p => getPricingData(p, p.qty).margin >= FINANCIAL_CONSTANTS.HIGH_MARGIN);\r\n  if (highMarginProducts.length > 0) {\r\n    highMarginProducts.forEach(p => {\r\n      const margin = getPricingData(p, p.qty).margin;\r\n      recommendations.push(`Focus on upselling \"${p.name}\" (margin ${(margin * 100).toFixed(1)}%) for better profit.`);\r\n    });\r\n  }\r\n\r\n  // 3. Bundle services\r\n  if (products.length > 1) {\r\n    const bundleDiscount = FINANCIAL_CONSTANTS.ANNUAL_DISCOUNT_RATE * 100;\r\n    recommendations.push(\r\n      `Bundle multiple products/services for a more attractive offer. Consider offering a ${bundleDiscount}% discount for annual commitments.`\r\n    );\r\n  }\r\n\r\n  // 4. Service charge review\r\n  if (serviceCharge < FINANCIAL_CONSTANTS.MIN_SERVICE_FEE) {\r\n    recommendations.push(\r\n      `Consider increasing your Professional Services & Support fee to at least $${FINANCIAL_CONSTANTS.MIN_SERVICE_FEE}/year to match industry averages.`\r\n    );\r\n  }\r\n\r\n  // 5. Profitability check\r\n  if (profitBeforeTax < 0) {\r\n    recommendations.push(\"Warning: Your current configuration is not profitable. Review your pricing and costs.\");\r\n  } else if (profitBeforeTax < FINANCIAL_CONSTANTS.MIN_PROFIT_THRESHOLD) {\r\n    recommendations.push(\r\n      `Your profit ($${profitBeforeTax.toFixed(2)}) is below the recommended threshold of $${FINANCIAL_CONSTANTS.MIN_PROFIT_THRESHOLD}. Consider increasing margins or service fees, or reducing costs.`\r\n    );\r\n  } else {\r\n    recommendations.push(\r\n      `Your configuration is profitable ($${profitBeforeTax.toFixed(2)}). Look for further upsell opportunities or cost optimizations.`\r\n    );\r\n  }\r\n\r\n  // 6. Complementary product recommendations\r\n  const complementaryCategories = {\r\n    Desktop: [\"Server\", \"SaaS\"],\r\n    Server: [\"SaaS\", \"Virtual Server\"],\r\n    \"Virtual Server\": [\"SaaS\"],\r\n    SaaS: [\"Server\", \"Virtual Server\"],\r\n  };\r\n\r\n  const missingCategories = Object.entries(complementaryCategories)\r\n    .filter(([category]) => selectedCategories.includes(category))\r\n    .flatMap(([, compCategories]) => \r\n      compCategories.filter(cat => !selectedCategories.includes(cat))\r\n    )\r\n    .filter((cat, index, self) => self.indexOf(cat) === index);\r\n\r\n  if (missingCategories.length > 0) {\r\n    const suggestedProduct = products.find(p => missingCategories.includes(p.category));\r\n    if (suggestedProduct) {\r\n      const potentialRevenue = formatCurrency(suggestedProduct.pricingSlabs[0].recommendedPrice * 5);\r\n      const annualRevenue = billingCycle === 'annual' ? \r\n        formatCurrency(potentialRevenue * 12) : \r\n        potentialRevenue;\r\n      \r\n      recommendations.push(\r\n        `Enhance your solution by adding a \"${suggestedProduct.category}\" product like \"${suggestedProduct.name}\". ` +\r\n        `This can provide a more comprehensive backup strategy and increase your revenue by approximately $${annualRevenue} ${billingCycle === 'annual' ? 'per year' : 'per month'} for 5 units.`\r\n      );\r\n    }\r\n  }\r\n\r\n  return recommendations;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}