{"ast":null,"code":"// Constants for financial calculations\nexport const FINANCIAL_CONSTANTS = {\n  ANNUAL_DISCOUNT_RATE: 0.03,\n  INDUSTRY_AVG_SERVICE_FEE: 100,\n  SERVICE_FEE_THRESHOLD_LOW: 0.8,\n  SERVICE_FEE_THRESHOLD_HIGH: 1.2,\n  TAX_RATE: 0.13,\n  DEFAULT_MARGIN: 0.35,\n  MIN_MARGIN: 0.20,\n  TARGET_MARGIN: 0.35,\n  HIGH_MARGIN: 0.40,\n  MIN_PROFIT_THRESHOLD: 200,\n  MIN_SERVICE_FEE: 100,\n  // Volume discount tiers\n  VOLUME_DISCOUNTS: [{\n    minQty: 5,\n    discount: 0.05\n  },\n  // 5% off for 5+ units\n  {\n    minQty: 10,\n    discount: 0.10\n  },\n  // 10% off for 10+ units\n  {\n    minQty: 20,\n    discount: 0.15\n  },\n  // 15% off for 20+ units\n  {\n    minQty: 50,\n    discount: 0.20\n  } // 20% off for 50+ units\n  ],\n  // Seasonal pricing periods\n  SEASONAL_PRICING: {\n    Q1: {\n      name: \"New Year Special\",\n      discount: 0.10,\n      months: [0, 1, 2]\n    },\n    // Jan-Mar\n    Q2: {\n      name: \"Spring Promotion\",\n      discount: 0.05,\n      months: [3, 4, 5]\n    },\n    // Apr-Jun\n    Q3: {\n      name: \"Summer Sale\",\n      discount: 0.15,\n      months: [6, 7, 8]\n    },\n    // Jul-Sep\n    Q4: {\n      name: \"Year-End Deal\",\n      discount: 0.20,\n      months: [9, 10, 11]\n    } // Oct-Dec\n  },\n  // Payment processing fee constants\n  PAYMENT_PROCESSING: {\n    BASE_FEE: 0.30,\n    PERCENTAGE_FEE: 0.0299,\n    MIN_AMOUNT_FOR_WAIVER: 1000,\n    // Minimum amount to qualify for fee waiver\n    ANNUAL_COMMITMENT_WAIVER: true,\n    // Whether annual commitments qualify for fee waiver\n    // Tiered processing fees based on monthly transaction volume\n    TIERED_FEES: [{\n      minVolume: 0,\n      baseFee: 0.30,\n      percentageFee: 0.0299\n    }, {\n      minVolume: 10000,\n      baseFee: 0.25,\n      percentageFee: 0.0275\n    }, {\n      minVolume: 50000,\n      baseFee: 0.20,\n      percentageFee: 0.0250\n    }, {\n      minVolume: 100000,\n      baseFee: 0.15,\n      percentageFee: 0.0225\n    }, {\n      minVolume: 500000,\n      baseFee: 0.10,\n      percentageFee: 0.0200\n    }]\n  },\n  // Customer loyalty tiers\n  LOYALTY_TIERS: {\n    BRONZE: {\n      name: \"Bronze\",\n      minSpend: 0,\n      benefits: {\n        processingFeeDiscount: 0,\n        serviceFeeDiscount: 0,\n        specialPromotions: false\n      }\n    },\n    SILVER: {\n      name: \"Silver\",\n      minSpend: 5000,\n      benefits: {\n        processingFeeDiscount: 0.25,\n        // 25% off processing fees\n        serviceFeeDiscount: 0.10,\n        // 10% off service fees\n        specialPromotions: true\n      }\n    },\n    GOLD: {\n      name: \"Gold\",\n      minSpend: 20000,\n      benefits: {\n        processingFeeDiscount: 0.50,\n        // 50% off processing fees\n        serviceFeeDiscount: 0.20,\n        // 20% off service fees\n        specialPromotions: true,\n        prioritySupport: true\n      }\n    },\n    PLATINUM: {\n      name: \"Platinum\",\n      minSpend: 50000,\n      benefits: {\n        processingFeeDiscount: 1.00,\n        // 100% off processing fees\n        serviceFeeDiscount: 0.30,\n        // 30% off service fees\n        specialPromotions: true,\n        prioritySupport: true,\n        dedicatedAccountManager: true\n      }\n    }\n  },\n  // Commitment and upsell constants\n  COMMITMENT_LEVELS: {\n    MONTHLY: {\n      name: \"Monthly\",\n      discount: 0,\n      minTerm: 1,\n      cancellationFee: 0\n    },\n    QUARTERLY: {\n      name: \"Quarterly\",\n      discount: 0.05,\n      minTerm: 3,\n      cancellationFee: 0.1\n    },\n    BIANNUAL: {\n      name: \"Bi-Annual\",\n      discount: 0.10,\n      minTerm: 6,\n      cancellationFee: 0.15\n    },\n    ANNUAL: {\n      name: \"Annual\",\n      discount: 0.15,\n      minTerm: 12,\n      cancellationFee: 0.2\n    }\n  },\n  // Upsell opportunities\n  UPSELL_OPPORTUNITIES: {\n    PREMIUM_SUPPORT: {\n      name: \"Premium Support\",\n      basePrice: 199,\n      margin: 0.75,\n      minCommitment: \"QUARTERLY\",\n      features: [\"24/7 Priority Support\", \"Dedicated Account Manager\", \"Custom Integration Support\", \"Advanced Analytics\"]\n    },\n    ENTERPRISE_FEATURES: {\n      name: \"Enterprise Features\",\n      basePrice: 299,\n      margin: 0.80,\n      minCommitment: \"BIANNUAL\",\n      features: [\"Custom Workflows\", \"API Access\", \"Advanced Security\", \"Multi-region Support\"]\n    },\n    TRAINING_PACKAGE: {\n      name: \"Training Package\",\n      basePrice: 499,\n      margin: 0.85,\n      minCommitment: \"QUARTERLY\",\n      features: [\"On-site Training\", \"Custom Documentation\", \"Best Practices Guide\", \"Ongoing Support\"]\n    }\n  },\n  // Profit optimization thresholds\n  PROFIT_OPTIMIZATION: {\n    MIN_MARGIN: 0.30,\n    TARGET_MARGIN: 0.40,\n    HIGH_MARGIN: 0.50,\n    MIN_COMMITMENT_DISCOUNT: 0.05,\n    MAX_COMMITMENT_DISCOUNT: 0.20,\n    BUNDLE_DISCOUNT: 0.10,\n    REFERRAL_BONUS: 0.05\n  }\n};\n\n/**\r\n * Calculate volume discount based on quantity\r\n * @param {number} qty - Quantity\r\n * @returns {number} Discount percentage (0-1)\r\n */\nexport const calculateVolumeDiscount = qty => {\n  const applicableDiscount = FINANCIAL_CONSTANTS.VOLUME_DISCOUNTS.filter(tier => qty >= tier.minQty).sort((a, b) => b.discount - a.discount)[0];\n  return applicableDiscount ? applicableDiscount.discount : 0;\n};\n\n/**\r\n * Get current seasonal pricing period\r\n * @returns {Object} Seasonal pricing period info\r\n */\nexport const getCurrentSeasonalPricing = () => {\n  const currentMonth = new Date().getMonth();\n  return Object.values(FINANCIAL_CONSTANTS.SEASONAL_PRICING).find(period => period.months.includes(currentMonth)) || {\n    name: \"Standard Pricing\",\n    discount: 0\n  };\n};\n\n/**\r\n * Get pricing data for a product based on quantity\r\n * @param {Object} product - Product object\r\n * @param {number} qty - Quantity\r\n * @returns {Object} Pricing slab data with discounts applied\r\n * @throws {Error} If product or quantity is invalid\r\n */\nexport const getPricingData = (product, qty) => {\n  if (!product || !product.pricingSlabs) {\n    throw new Error('Invalid product data');\n  }\n  if (!Number.isInteger(qty) || qty < 1) {\n    throw new Error('Quantity must be a positive integer');\n  }\n\n  // Validate pricing slabs\n  product.pricingSlabs.forEach(slab => {\n    if (slab.unitCost < 0) {\n      throw new Error(`Invalid unit cost (${slab.unitCost}) for product ${product.name}`);\n    }\n    if (slab.margin < FINANCIAL_CONSTANTS.MIN_MARGIN) {\n      throw new Error(`Margin (${slab.margin}) below minimum threshold for product ${product.name}`);\n    }\n  });\n  const slab = product.pricingSlabs.find(slab => qty >= slab.minQty && qty <= slab.maxQty) || product.pricingSlabs[product.pricingSlabs.length - 1];\n\n  // Calculate discounts\n  const volumeDiscount = calculateVolumeDiscount(qty);\n  const seasonalPricing = getCurrentSeasonalPricing();\n  const totalDiscount = Math.min(volumeDiscount + seasonalPricing.discount, 0.30); // Cap total discount at 30%\n\n  // Apply discounts to recommended price\n  const discountedPrice = slab.recommendedPrice * (1 - totalDiscount);\n  return {\n    ...slab,\n    recommendedPrice: formatCurrency(discountedPrice),\n    volumeDiscount,\n    seasonalDiscount: seasonalPricing.discount,\n    totalDiscount,\n    seasonalPeriod: seasonalPricing.name\n  };\n};\n\n/**\r\n * Get package name based on number of products\r\n * @param {Array} products - Array of products\r\n * @returns {string} Package name\r\n */\nexport const getPackageName = products => {\n  if (!Array.isArray(products)) {\n    throw new Error('Invalid products array');\n  }\n  return products.length >= 2 ? \"Backup Total\" : \"Backup Basic\";\n};\n\n/**\r\n * Calculate total cost with proper decimal handling\r\n * @param {number} amount - Amount to format\r\n * @returns {number} Formatted amount with 2 decimal places\r\n */\nexport const formatCurrency = amount => {\n  if (typeof amount !== 'number' || isNaN(amount)) {\n    throw new Error('Invalid amount for currency formatting');\n  }\n  if (!isFinite(amount)) {\n    throw new Error('Amount must be a finite number');\n  }\n  return Number(Math.round(amount + 'e2') + 'e-2');\n};\n\n/**\r\n * Get customer loyalty tier based on total spend\r\n * @param {number} totalSpend - Total customer spend\r\n * @returns {Object} Loyalty tier details\r\n */\nexport const getLoyaltyTier = totalSpend => {\n  const tiers = Object.entries(FINANCIAL_CONSTANTS.LOYALTY_TIERS).sort(([, a], [, b]) => b.minSpend - a.minSpend);\n  for (const [, tier] of tiers) {\n    if (totalSpend >= tier.minSpend) {\n      return tier;\n    }\n  }\n  return FINANCIAL_CONSTANTS.LOYALTY_TIERS.BRONZE;\n};\n\n/**\r\n * Get tiered processing fee based on monthly volume\r\n * @param {number} monthlyVolume - Monthly transaction volume\r\n * @returns {Object} Fee tier details\r\n */\nexport const getProcessingFeeTier = monthlyVolume => {\n  const tiers = FINANCIAL_CONSTANTS.PAYMENT_PROCESSING.TIERED_FEES.sort((a, b) => b.minVolume - a.minVolume);\n  for (const tier of tiers) {\n    if (monthlyVolume >= tier.minVolume) {\n      return tier;\n    }\n  }\n  return tiers[tiers.length - 1];\n};\n\n/**\r\n * Calculate payment processing fee\r\n * @param {number} amount - Transaction amount\r\n * @param {boolean} isAnnual - Whether this is an annual commitment\r\n * @param {boolean} waiveFees - Whether to waive the fees\r\n * @param {number} monthlyVolume - Monthly transaction volume\r\n * @param {number} totalSpend - Total customer spend\r\n * @returns {Object} Fee details\r\n */\nexport const calculatePaymentProcessingFee = (amount, isAnnual, waiveFees, monthlyVolume = 0, totalSpend = 0) => {\n  if (waiveFees) {\n    return {\n      fee: 0,\n      percentage: 0,\n      baseFee: 0,\n      isWaived: true,\n      reason: isAnnual ? \"Annual commitment\" : \"Fee waiver applied\"\n    };\n  }\n\n  // Get applicable fee tier\n  const feeTier = getProcessingFeeTier(monthlyVolume);\n  const baseFee = feeTier.baseFee;\n  const percentageFee = amount * feeTier.percentageFee;\n  const totalFee = baseFee + percentageFee;\n\n  // Get loyalty tier benefits\n  const loyaltyTier = getLoyaltyTier(totalSpend);\n  const loyaltyDiscount = loyaltyTier.benefits.processingFeeDiscount;\n  const discountedFee = totalFee * (1 - loyaltyDiscount);\n\n  // Check if amount qualifies for automatic waiver\n  const qualifiesForWaiver = amount >= FINANCIAL_CONSTANTS.PAYMENT_PROCESSING.MIN_AMOUNT_FOR_WAIVER || isAnnual && FINANCIAL_CONSTANTS.PAYMENT_PROCESSING.ANNUAL_COMMITMENT_WAIVER || loyaltyTier.name === \"PLATINUM\";\n  return {\n    fee: qualifiesForWaiver ? 0 : discountedFee,\n    percentage: feeTier.percentageFee,\n    baseFee,\n    isWaived: qualifiesForWaiver,\n    reason: qualifiesForWaiver ? isAnnual ? \"Annual commitment\" : loyaltyTier.name === \"PLATINUM\" ? \"Platinum tier benefit\" : \"Amount exceeds minimum threshold\" : \"Standard processing fee\",\n    loyaltyTier: loyaltyTier.name,\n    feeTier: `$${feeTier.minVolume.toLocaleString()}+`,\n    originalFee: totalFee,\n    loyaltyDiscount: loyaltyDiscount * 100\n  };\n};\n\n/**\r\n * Calculate fee savings analytics\r\n * @param {Object} feeDetails - Fee calculation details\r\n * @param {number} monthlyVolume - Monthly transaction volume\r\n * @param {number} totalSpend - Total customer spend\r\n * @returns {Object} Fee savings analytics\r\n */\nexport const calculateFeeSavings = (feeDetails, monthlyVolume, totalSpend) => {\n  var _loyaltySavings$next, _volumeSavings$next, _loyaltySavings$next2, _volumeSavings$next2, _loyaltySavings$next3, _volumeSavings$next3;\n  const currentTier = getLoyaltyTier(totalSpend);\n  const currentFeeTier = getProcessingFeeTier(monthlyVolume);\n\n  // Calculate potential savings from next loyalty tier\n  const nextLoyaltyTier = Object.entries(FINANCIAL_CONSTANTS.LOYALTY_TIERS).find(([, tier]) => tier.minSpend > currentTier.minSpend);\n  let loyaltySavings = {\n    current: {\n      tier: currentTier.name,\n      discount: currentTier.benefits.processingFeeDiscount * 100,\n      monthlySavings: feeDetails.originalFee * currentTier.benefits.processingFeeDiscount,\n      annualSavings: feeDetails.originalFee * currentTier.benefits.processingFeeDiscount * 12\n    },\n    next: null\n  };\n  if (nextLoyaltyTier) {\n    const [, nextTierData] = nextLoyaltyTier;\n    const nextTierDiscount = nextTierData.benefits.processingFeeDiscount;\n    const potentialMonthlySavings = feeDetails.originalFee * nextTierDiscount;\n    const currentMonthlySavings = feeDetails.originalFee * currentTier.benefits.processingFeeDiscount;\n    loyaltySavings.next = {\n      tier: nextTierData.name,\n      discount: nextTierDiscount * 100,\n      additionalMonthlySavings: potentialMonthlySavings - currentMonthlySavings,\n      additionalAnnualSavings: (potentialMonthlySavings - currentMonthlySavings) * 12,\n      requiredSpend: nextTierData.minSpend - totalSpend\n    };\n  }\n\n  // Calculate potential savings from next fee tier\n  const nextFeeTier = FINANCIAL_CONSTANTS.PAYMENT_PROCESSING.TIERED_FEES.find(tier => tier.minVolume > currentFeeTier.minVolume);\n  let volumeSavings = {\n    current: {\n      tier: `$${currentFeeTier.minVolume.toLocaleString()}+`,\n      rate: currentFeeTier.percentageFee * 100,\n      baseFee: currentFeeTier.baseFee,\n      monthlyFees: feeDetails.originalFee,\n      annualFees: feeDetails.originalFee * 12\n    },\n    next: null\n  };\n  if (nextFeeTier) {\n    const potentialBaseFee = nextFeeTier.baseFee;\n    const potentialPercentageFee = monthlyVolume * nextFeeTier.percentageFee;\n    const potentialMonthlyFees = potentialBaseFee + potentialPercentageFee;\n    const currentMonthlyFees = feeDetails.originalFee;\n    volumeSavings.next = {\n      tier: `$${nextFeeTier.minVolume.toLocaleString()}+`,\n      rate: nextFeeTier.percentageFee * 100,\n      baseFee: nextFeeTier.baseFee,\n      potentialMonthlyFees,\n      potentialAnnualFees: potentialMonthlyFees * 12,\n      monthlySavings: currentMonthlyFees - potentialMonthlyFees,\n      annualSavings: (currentMonthlyFees - potentialMonthlyFees) * 12,\n      requiredVolume: nextFeeTier.minVolume - monthlyVolume\n    };\n  }\n\n  // Calculate total savings\n  const totalSavings = {\n    current: {\n      monthly: loyaltySavings.current.monthlySavings,\n      annual: loyaltySavings.current.annualSavings,\n      percentage: loyaltySavings.current.monthlySavings / feeDetails.originalFee * 100\n    },\n    potential: {\n      monthly: (((_loyaltySavings$next = loyaltySavings.next) === null || _loyaltySavings$next === void 0 ? void 0 : _loyaltySavings$next.additionalMonthlySavings) || 0) + (((_volumeSavings$next = volumeSavings.next) === null || _volumeSavings$next === void 0 ? void 0 : _volumeSavings$next.monthlySavings) || 0),\n      annual: (((_loyaltySavings$next2 = loyaltySavings.next) === null || _loyaltySavings$next2 === void 0 ? void 0 : _loyaltySavings$next2.additionalAnnualSavings) || 0) + (((_volumeSavings$next2 = volumeSavings.next) === null || _volumeSavings$next2 === void 0 ? void 0 : _volumeSavings$next2.annualSavings) || 0),\n      percentage: ((((_loyaltySavings$next3 = loyaltySavings.next) === null || _loyaltySavings$next3 === void 0 ? void 0 : _loyaltySavings$next3.additionalMonthlySavings) || 0) + (((_volumeSavings$next3 = volumeSavings.next) === null || _volumeSavings$next3 === void 0 ? void 0 : _volumeSavings$next3.monthlySavings) || 0)) / feeDetails.originalFee * 100\n    }\n  };\n  return {\n    loyaltySavings,\n    volumeSavings,\n    totalSavings,\n    recommendations: generateSavingsRecommendations(loyaltySavings, volumeSavings)\n  };\n};\n\n/**\r\n * Generate savings recommendations\r\n * @param {Object} loyaltySavings - Loyalty tier savings details\r\n * @param {Object} volumeSavings - Volume tier savings details\r\n * @returns {Array} Array of savings recommendations\r\n */\nconst generateSavingsRecommendations = (loyaltySavings, volumeSavings) => {\n  const recommendations = [];\n  if (loyaltySavings.next) {\n    recommendations.push({\n      type: 'loyalty',\n      message: `Upgrade to ${loyaltySavings.next.tier} tier by spending $${loyaltySavings.next.requiredSpend.toFixed(2)} more to save an additional $${loyaltySavings.next.additionalMonthlySavings.toFixed(2)}/month on processing fees.`,\n      potentialSavings: {\n        monthly: loyaltySavings.next.additionalMonthlySavings,\n        annual: loyaltySavings.next.additionalAnnualSavings\n      }\n    });\n  }\n  if (volumeSavings.next) {\n    recommendations.push({\n      type: 'volume',\n      message: `Increase monthly volume by $${volumeSavings.next.requiredVolume.toFixed(2)} to qualify for the ${volumeSavings.next.tier} tier and save $${volumeSavings.next.monthlySavings.toFixed(2)}/month on processing fees.`,\n      potentialSavings: {\n        monthly: volumeSavings.next.monthlySavings,\n        annual: volumeSavings.next.annualSavings\n      }\n    });\n  }\n  return recommendations;\n};\n\n/**\r\n * Generate detailed fee report\r\n * @param {Object} feeDetails - Fee calculation details\r\n * @param {number} monthlyVolume - Monthly transaction volume\r\n * @param {number} totalSpend - Total customer spend\r\n * @returns {Object} Detailed fee report\r\n */\nexport const generateFeeReport = (feeDetails, monthlyVolume, totalSpend) => {\n  const savings = calculateFeeSavings(feeDetails, monthlyVolume, totalSpend);\n  return {\n    currentFees: {\n      baseFee: feeDetails.baseFee,\n      percentageFee: feeDetails.percentage * 100,\n      totalFee: feeDetails.fee,\n      isWaived: feeDetails.isWaived,\n      waiverReason: feeDetails.reason\n    },\n    currentSavings: {\n      loyaltyTier: savings.loyaltySavings.current.tier,\n      loyaltyDiscount: savings.loyaltySavings.current.discount,\n      monthlySavings: savings.loyaltySavings.current.monthlySavings,\n      annualSavings: savings.loyaltySavings.current.annualSavings\n    },\n    potentialSavings: {\n      loyaltyUpgrade: savings.loyaltySavings.next ? {\n        tier: savings.loyaltySavings.next.tier,\n        additionalDiscount: savings.loyaltySavings.next.discount - savings.loyaltySavings.current.discount,\n        monthlySavings: savings.loyaltySavings.next.additionalMonthlySavings,\n        annualSavings: savings.loyaltySavings.next.additionalAnnualSavings,\n        requiredSpend: savings.loyaltySavings.next.requiredSpend\n      } : null,\n      volumeUpgrade: savings.volumeSavings.next ? {\n        tier: savings.volumeSavings.next.tier,\n        newRate: savings.volumeSavings.next.rate,\n        newBaseFee: savings.volumeSavings.next.baseFee,\n        monthlySavings: savings.volumeSavings.next.monthlySavings,\n        annualSavings: savings.volumeSavings.next.annualSavings,\n        requiredVolume: savings.volumeSavings.next.requiredVolume\n      } : null\n    },\n    totalSavings: {\n      current: {\n        monthly: savings.totalSavings.current.monthly,\n        annual: savings.totalSavings.current.annual,\n        percentage: savings.totalSavings.current.percentage\n      },\n      potential: {\n        monthly: savings.totalSavings.potential.monthly,\n        annual: savings.totalSavings.potential.annual,\n        percentage: savings.totalSavings.potential.percentage\n      }\n    },\n    recommendations: savings.recommendations\n  };\n};\n\n/**\r\n * Calculate commitment-based pricing\r\n * @param {number} basePrice - Base price of the product\r\n * @param {string} commitmentLevel - Commitment level (MONTHLY, QUARTERLY, etc.)\r\n * @param {number} quantity - Number of units\r\n * @returns {Object} Commitment pricing details\r\n */\nexport const calculateCommitmentPricing = (basePrice, commitmentLevel, quantity) => {\n  const commitment = FINANCIAL_CONSTANTS.COMMITMENT_LEVELS[commitmentLevel];\n  if (!commitment) {\n    throw new Error('Invalid commitment level');\n  }\n  const discount = commitment.discount;\n  const discountedPrice = basePrice * (1 - discount);\n  const totalPrice = discountedPrice * quantity;\n  const savings = basePrice * quantity - totalPrice;\n  return {\n    commitmentLevel: commitment.name,\n    basePrice,\n    discountedPrice,\n    quantity,\n    totalPrice,\n    savings,\n    discount: discount * 100,\n    minTerm: commitment.minTerm,\n    cancellationFee: commitment.cancellationFee * 100\n  };\n};\n\n/**\r\n * Get available upsell opportunities\r\n * @param {Array} currentProducts - Current product selection\r\n * @param {string} commitmentLevel - Current commitment level\r\n * @param {number} totalSpend - Total customer spend\r\n * @returns {Array} Available upsell opportunities\r\n */\nexport const getUpsellOpportunities = (currentProducts, commitmentLevel, totalSpend) => {\n  const opportunities = [];\n  const currentFeatures = new Set(currentProducts.flatMap(p => p.features || []));\n  Object.entries(FINANCIAL_CONSTANTS.UPSELL_OPPORTUNITIES).forEach(([key, opportunity]) => {\n    // Check if customer qualifies for this upsell\n    const commitment = FINANCIAL_CONSTANTS.COMMITMENT_LEVELS[opportunity.minCommitment];\n    const qualifies = commitment && FINANCIAL_CONSTANTS.COMMITMENT_LEVELS[commitmentLevel].minTerm >= commitment.minTerm;\n    if (qualifies) {\n      const newFeatures = opportunity.features.filter(f => !currentFeatures.has(f));\n      if (newFeatures.length > 0) {\n        opportunities.push({\n          ...opportunity,\n          key,\n          newFeatures,\n          price: calculateCommitmentPricing(opportunity.basePrice, commitmentLevel, 1),\n          potentialRevenue: opportunity.basePrice * (1 - FINANCIAL_CONSTANTS.COMMITMENT_LEVELS[commitmentLevel].discount),\n          margin: opportunity.margin * 100\n        });\n      }\n    }\n  });\n  return opportunities;\n};\n\n/**\r\n * Calculate optimal pricing strategy\r\n * @param {Object} product - Product details\r\n * @param {number} quantity - Current quantity\r\n * @param {string} commitmentLevel - Current commitment level\r\n * @param {number} totalSpend - Total customer spend\r\n * @returns {Object} Optimal pricing strategy\r\n */\nexport const calculateOptimalPricing = (product, quantity, commitmentLevel, totalSpend) => {\n  const currentMargin = getPricingData(product, quantity).margin;\n  const loyaltyTier = getLoyaltyTier(totalSpend);\n  const commitment = FINANCIAL_CONSTANTS.COMMITMENT_LEVELS[commitmentLevel];\n  const strategies = {\n    quantity: {\n      current: quantity,\n      recommended: quantity,\n      potential: 0\n    },\n    commitment: {\n      current: commitmentLevel,\n      recommended: commitmentLevel,\n      potential: 0\n    },\n    upsells: [],\n    totalPotential: 0\n  };\n\n  // Quantity optimization\n  if (currentMargin < FINANCIAL_CONSTANTS.PROFIT_OPTIMIZATION.TARGET_MARGIN) {\n    const nextVolumeTier = FINANCIAL_CONSTANTS.VOLUME_DISCOUNTS.find(tier => tier.minQty > quantity);\n    if (nextVolumeTier) {\n      strategies.quantity.recommended = nextVolumeTier.minQty;\n      strategies.quantity.potential = (nextVolumeTier.minQty - quantity) * product.pricingSlabs[0].recommendedPrice;\n    }\n  }\n\n  // Commitment optimization\n  const nextCommitment = Object.entries(FINANCIAL_CONSTANTS.COMMITMENT_LEVELS).find(([key, level]) => level.minTerm > commitment.minTerm);\n  if (nextCommitment) {\n    const [nextLevel, nextCommitmentData] = nextCommitment;\n    strategies.commitment.recommended = nextLevel;\n    strategies.commitment.potential = product.pricingSlabs[0].recommendedPrice * quantity * (nextCommitmentData.discount - commitment.discount);\n  }\n\n  // Upsell opportunities\n  strategies.upsells = getUpsellOpportunities([product], commitmentLevel, totalSpend).map(upsell => ({\n    name: upsell.name,\n    potential: upsell.potentialRevenue,\n    margin: upsell.margin,\n    features: upsell.newFeatures\n  }));\n\n  // Calculate total potential\n  strategies.totalPotential = strategies.quantity.potential + strategies.commitment.potential + strategies.upsells.reduce((sum, upsell) => sum + upsell.potential, 0);\n  return strategies;\n};\n\n/**\r\n * Generate profit optimization recommendations\r\n * @param {Array} products - Current product selection\r\n * @param {string} commitmentLevel - Current commitment level\r\n * @param {number} totalSpend - Total customer spend\r\n * @returns {Array} Profit optimization recommendations\r\n */\nexport const getProfitOptimizationRecommendations = (products, commitmentLevel, totalSpend) => {\n  const recommendations = [];\n\n  // Analyze each product\n  products.forEach(product => {\n    const optimalPricing = calculateOptimalPricing(product, product.qty, commitmentLevel, totalSpend);\n\n    // Quantity recommendations\n    if (optimalPricing.quantity.recommended > optimalPricing.quantity.current) {\n      recommendations.push({\n        type: 'quantity',\n        product: product.name,\n        message: `Increase ${product.name} quantity to ${optimalPricing.quantity.recommended} units to qualify for volume discount and improve margin.`,\n        potential: optimalPricing.quantity.potential\n      });\n    }\n\n    // Commitment recommendations\n    if (optimalPricing.commitment.recommended !== optimalPricing.commitment.current) {\n      const nextCommitment = FINANCIAL_CONSTANTS.COMMITMENT_LEVELS[optimalPricing.commitment.recommended];\n      recommendations.push({\n        type: 'commitment',\n        message: `Upgrade to ${nextCommitment.name} commitment to get ${(nextCommitment.discount * 100).toFixed(0)}% discount and improve profitability.`,\n        potential: optimalPricing.commitment.potential\n      });\n    }\n\n    // Upsell recommendations\n    optimalPricing.upsells.forEach(upsell => {\n      recommendations.push({\n        type: 'upsell',\n        name: upsell.name,\n        message: `Add ${upsell.name} to get ${upsell.features.join(', ')}.`,\n        potential: upsell.potential,\n        margin: upsell.margin\n      });\n    });\n  });\n\n  // Sort recommendations by potential value\n  return recommendations.sort((a, b) => b.potential - a.potential);\n};\n\n/**\r\n * Calculate total cost with all discounts and fees\r\n * @param {Object} product - Product object\r\n * @param {number} qty - Quantity\r\n * @param {boolean} isAnnual - Whether this is an annual commitment\r\n * @param {boolean} waiveFees - Whether to waive processing fees\r\n * @param {number} monthlyVolume - Monthly transaction volume\r\n * @param {number} totalSpend - Total customer spend\r\n * @returns {Object} Complete pricing details\r\n */\nexport const calculateTotalCost = (product, qty, isAnnual, waiveFees, monthlyVolume = 0, totalSpend = 0) => {\n  const pricingData = getPricingData(product, qty);\n  const subtotal = pricingData.recommendedPrice * qty;\n  const tax = subtotal * FINANCIAL_CONSTANTS.TAX_RATE;\n  const processingFee = calculatePaymentProcessingFee(subtotal + tax, isAnnual, waiveFees, monthlyVolume, totalSpend);\n  const loyaltyTier = getLoyaltyTier(totalSpend);\n  const feeReport = generateFeeReport(processingFee, monthlyVolume, totalSpend);\n\n  // Calculate commitment level\n  const commitmentLevel = isAnnual ? 'ANNUAL' : 'MONTHLY';\n  const commitmentPricing = calculateCommitmentPricing(pricingData.recommendedPrice, commitmentLevel, qty);\n\n  // Get upsell opportunities\n  const upsellOpportunities = getUpsellOpportunities([product], commitmentLevel, totalSpend);\n\n  // Get profit optimization recommendations\n  const profitRecommendations = getProfitOptimizationRecommendations([product], commitmentLevel, totalSpend);\n  return {\n    subtotal,\n    tax,\n    processingFee: processingFee.fee,\n    total: subtotal + tax + processingFee.fee,\n    discounts: {\n      volume: pricingData.volumeDiscount,\n      seasonal: pricingData.seasonalDiscount,\n      total: pricingData.totalDiscount,\n      commitment: commitmentPricing.discount\n    },\n    fees: {\n      processing: processingFee,\n      tax: FINANCIAL_CONSTANTS.TAX_RATE\n    },\n    loyalty: {\n      tier: loyaltyTier.name,\n      benefits: loyaltyTier.benefits\n    },\n    commitment: commitmentPricing,\n    upsellOpportunities,\n    profitRecommendations,\n    feeReport,\n    isAnnual,\n    quantity: qty\n  };\n};\n\n/**\r\n * Get business recommendations based on current configuration\r\n * @param {Array} products - Array of selected products\r\n * @param {number} serviceCharge - Service charge amount\r\n * @param {string} billingCycle - Billing cycle (monthly/annual)\r\n * @param {number} profitBeforeTax - Profit before tax\r\n * @param {number} totalSpend - Total customer spend\r\n * @param {number} monthlyVolume - Monthly transaction volume\r\n * @returns {Array} Array of recommendations\r\n */\nexport const getRecommendations = (products, serviceCharge, billingCycle, profitBeforeTax, totalSpend = 0, monthlyVolume = 0) => {\n  if (!Array.isArray(products) || typeof serviceCharge !== 'number' || !['monthly', 'annual'].includes(billingCycle) || typeof profitBeforeTax !== 'number') {\n    throw new Error('Invalid input parameters');\n  }\n  const recommendations = [];\n  const selectedCategories = products.map(p => p.category);\n  const currentSeason = getCurrentSeasonalPricing();\n  const isAnnual = billingCycle === 'annual';\n\n  // Calculate total amount for fee waiver recommendations\n  const totalAmount = products.reduce((sum, p) => {\n    const pricingData = getPricingData(p, p.qty);\n    return sum + pricingData.recommendedPrice * p.qty;\n  }, 0);\n\n  // Loyalty tier recommendations\n  const currentTier = getLoyaltyTier(totalSpend);\n  const nextTier = Object.entries(FINANCIAL_CONSTANTS.LOYALTY_TIERS).find(([, tier]) => tier.minSpend > currentTier.minSpend);\n  if (nextTier) {\n    const [, nextTierData] = nextTier;\n    const remainingForNextTier = nextTierData.minSpend - totalSpend;\n    recommendations.push(`Add $${remainingForNextTier.toFixed(2)} more to your total spend to reach ${nextTierData.name} tier and get ${(nextTierData.benefits.processingFeeDiscount * 100).toFixed(0)}% off processing fees.`);\n  }\n\n  // Volume-based fee tier recommendations\n  const currentFeeTier = getProcessingFeeTier(monthlyVolume);\n  const nextFeeTier = FINANCIAL_CONSTANTS.PAYMENT_PROCESSING.TIERED_FEES.find(tier => tier.minVolume > currentFeeTier.minVolume);\n  if (nextFeeTier) {\n    const remainingForNextTier = nextFeeTier.minVolume - monthlyVolume;\n    recommendations.push(`Increase your monthly volume by $${remainingForNextTier.toFixed(2)} to qualify for lower processing fees (${(nextFeeTier.percentageFee * 100).toFixed(2)}% + $${nextFeeTier.baseFee.toFixed(2)}).`);\n  }\n\n  // Payment processing fee recommendations\n  if (!isAnnual && totalAmount < FINANCIAL_CONSTANTS.PAYMENT_PROCESSING.MIN_AMOUNT_FOR_WAIVER) {\n    const remainingForWaiver = FINANCIAL_CONSTANTS.PAYMENT_PROCESSING.MIN_AMOUNT_FOR_WAIVER - totalAmount;\n    recommendations.push(`Add $${remainingForWaiver.toFixed(2)} more to your order to qualify for automatic payment processing fee waiver.`);\n  }\n  if (!isAnnual && FINANCIAL_CONSTANTS.PAYMENT_PROCESSING.ANNUAL_COMMITMENT_WAIVER) {\n    recommendations.push(\"Switch to annual billing to automatically waive payment processing fees.\");\n  }\n\n  // Add seasonal pricing recommendation\n  if (currentSeason.discount > 0) {\n    recommendations.push(`Take advantage of our ${currentSeason.name} with ${(currentSeason.discount * 100).toFixed(0)}% off!`);\n  }\n\n  // Volume discount recommendations\n  products.forEach(p => {\n    const nextVolumeTier = FINANCIAL_CONSTANTS.VOLUME_DISCOUNTS.find(tier => tier.minQty > p.qty);\n    if (nextVolumeTier) {\n      const additionalQty = nextVolumeTier.minQty - p.qty;\n      const potentialDiscount = nextVolumeTier.discount;\n      recommendations.push(`Add ${additionalQty} more ${p.name} units to qualify for ${(potentialDiscount * 100).toFixed(0)}% volume discount.`);\n    }\n  });\n\n  // 1. Margin improvement\n  const lowMarginProducts = products.filter(p => getPricingData(p, p.qty).margin < FINANCIAL_CONSTANTS.TARGET_MARGIN);\n  if (lowMarginProducts.length > 0) {\n    lowMarginProducts.forEach(p => {\n      const currentMargin = getPricingData(p, p.qty).margin;\n      recommendations.push(`Increase the margin for \"${p.name}\" (currently ${(currentMargin * 100).toFixed(1)}%) to at least ${(FINANCIAL_CONSTANTS.TARGET_MARGIN * 100).toFixed(1)}% to improve profitability.`);\n    });\n  }\n\n  // 2. Upsell higher-margin products\n  const highMarginProducts = products.filter(p => getPricingData(p, p.qty).margin >= FINANCIAL_CONSTANTS.HIGH_MARGIN);\n  if (highMarginProducts.length > 0) {\n    highMarginProducts.forEach(p => {\n      const margin = getPricingData(p, p.qty).margin;\n      recommendations.push(`Focus on upselling \"${p.name}\" (margin ${(margin * 100).toFixed(1)}%) for better profit.`);\n    });\n  }\n\n  // 3. Bundle services\n  if (products.length > 1) {\n    const bundleDiscount = FINANCIAL_CONSTANTS.ANNUAL_DISCOUNT_RATE * 100;\n    recommendations.push(`Bundle multiple products/services for a more attractive offer. Consider offering a ${bundleDiscount}% discount for annual commitments.`);\n  }\n\n  // 4. Service charge review\n  if (serviceCharge < FINANCIAL_CONSTANTS.MIN_SERVICE_FEE) {\n    recommendations.push(`Consider increasing your Professional Services & Support fee to at least $${FINANCIAL_CONSTANTS.MIN_SERVICE_FEE}/year to match industry averages.`);\n  }\n\n  // 5. Profitability check\n  if (profitBeforeTax < 0) {\n    recommendations.push(\"Warning: Your current configuration is not profitable. Review your pricing and costs.\");\n  } else if (profitBeforeTax < FINANCIAL_CONSTANTS.MIN_PROFIT_THRESHOLD) {\n    recommendations.push(`Your profit ($${profitBeforeTax.toFixed(2)}) is below the recommended threshold of $${FINANCIAL_CONSTANTS.MIN_PROFIT_THRESHOLD}. Consider increasing margins or service fees, or reducing costs.`);\n  } else {\n    recommendations.push(`Your configuration is profitable ($${profitBeforeTax.toFixed(2)}). Look for further upsell opportunities or cost optimizations.`);\n  }\n\n  // 6. Complementary product recommendations\n  const complementaryCategories = {\n    Desktop: [\"Server\", \"SaaS\"],\n    Server: [\"SaaS\", \"Virtual Server\"],\n    \"Virtual Server\": [\"SaaS\"],\n    SaaS: [\"Server\", \"Virtual Server\"]\n  };\n  const missingCategories = Object.entries(complementaryCategories).filter(([category]) => selectedCategories.includes(category)).flatMap(([, compCategories]) => compCategories.filter(cat => !selectedCategories.includes(cat))).filter((cat, index, self) => self.indexOf(cat) === index);\n  if (missingCategories.length > 0) {\n    const suggestedProduct = products.find(p => missingCategories.includes(p.category));\n    if (suggestedProduct) {\n      const potentialRevenue = formatCurrency(suggestedProduct.pricingSlabs[0].recommendedPrice * 5);\n      const annualRevenue = billingCycle === 'annual' ? formatCurrency(potentialRevenue * 12) : potentialRevenue;\n      recommendations.push(`Enhance your solution by adding a \"${suggestedProduct.category}\" product like \"${suggestedProduct.name}\". ` + `This can provide a more comprehensive backup strategy and increase your revenue by approximately $${annualRevenue} ${billingCycle === 'annual' ? 'per year' : 'per month'} for 5 units.`);\n    }\n  }\n  return recommendations;\n};","map":{"version":3,"names":["FINANCIAL_CONSTANTS","ANNUAL_DISCOUNT_RATE","INDUSTRY_AVG_SERVICE_FEE","SERVICE_FEE_THRESHOLD_LOW","SERVICE_FEE_THRESHOLD_HIGH","TAX_RATE","DEFAULT_MARGIN","MIN_MARGIN","TARGET_MARGIN","HIGH_MARGIN","MIN_PROFIT_THRESHOLD","MIN_SERVICE_FEE","VOLUME_DISCOUNTS","minQty","discount","SEASONAL_PRICING","Q1","name","months","Q2","Q3","Q4","PAYMENT_PROCESSING","BASE_FEE","PERCENTAGE_FEE","MIN_AMOUNT_FOR_WAIVER","ANNUAL_COMMITMENT_WAIVER","TIERED_FEES","minVolume","baseFee","percentageFee","LOYALTY_TIERS","BRONZE","minSpend","benefits","processingFeeDiscount","serviceFeeDiscount","specialPromotions","SILVER","GOLD","prioritySupport","PLATINUM","dedicatedAccountManager","COMMITMENT_LEVELS","MONTHLY","minTerm","cancellationFee","QUARTERLY","BIANNUAL","ANNUAL","UPSELL_OPPORTUNITIES","PREMIUM_SUPPORT","basePrice","margin","minCommitment","features","ENTERPRISE_FEATURES","TRAINING_PACKAGE","PROFIT_OPTIMIZATION","MIN_COMMITMENT_DISCOUNT","MAX_COMMITMENT_DISCOUNT","BUNDLE_DISCOUNT","REFERRAL_BONUS","calculateVolumeDiscount","qty","applicableDiscount","filter","tier","sort","a","b","getCurrentSeasonalPricing","currentMonth","Date","getMonth","Object","values","find","period","includes","getPricingData","product","pricingSlabs","Error","Number","isInteger","forEach","slab","unitCost","maxQty","length","volumeDiscount","seasonalPricing","totalDiscount","Math","min","discountedPrice","recommendedPrice","formatCurrency","seasonalDiscount","seasonalPeriod","getPackageName","products","Array","isArray","amount","isNaN","isFinite","round","getLoyaltyTier","totalSpend","tiers","entries","getProcessingFeeTier","monthlyVolume","calculatePaymentProcessingFee","isAnnual","waiveFees","fee","percentage","isWaived","reason","feeTier","totalFee","loyaltyTier","loyaltyDiscount","discountedFee","qualifiesForWaiver","toLocaleString","originalFee","calculateFeeSavings","feeDetails","_loyaltySavings$next","_volumeSavings$next","_loyaltySavings$next2","_volumeSavings$next2","_loyaltySavings$next3","_volumeSavings$next3","currentTier","currentFeeTier","nextLoyaltyTier","loyaltySavings","current","monthlySavings","annualSavings","next","nextTierData","nextTierDiscount","potentialMonthlySavings","currentMonthlySavings","additionalMonthlySavings","additionalAnnualSavings","requiredSpend","nextFeeTier","volumeSavings","rate","monthlyFees","annualFees","potentialBaseFee","potentialPercentageFee","potentialMonthlyFees","currentMonthlyFees","potentialAnnualFees","requiredVolume","totalSavings","monthly","annual","potential","recommendations","generateSavingsRecommendations","push","type","message","toFixed","potentialSavings","generateFeeReport","savings","currentFees","waiverReason","currentSavings","loyaltyUpgrade","additionalDiscount","volumeUpgrade","newRate","newBaseFee","calculateCommitmentPricing","commitmentLevel","quantity","commitment","totalPrice","getUpsellOpportunities","currentProducts","opportunities","currentFeatures","Set","flatMap","p","key","opportunity","qualifies","newFeatures","f","has","price","potentialRevenue","calculateOptimalPricing","currentMargin","strategies","recommended","upsells","totalPotential","nextVolumeTier","nextCommitment","level","nextLevel","nextCommitmentData","map","upsell","reduce","sum","getProfitOptimizationRecommendations","optimalPricing","join","calculateTotalCost","pricingData","subtotal","tax","processingFee","feeReport","commitmentPricing","upsellOpportunities","profitRecommendations","total","discounts","volume","seasonal","fees","processing","loyalty","getRecommendations","serviceCharge","billingCycle","profitBeforeTax","selectedCategories","category","currentSeason","totalAmount","nextTier","remainingForNextTier","remainingForWaiver","additionalQty","potentialDiscount","lowMarginProducts","highMarginProducts","bundleDiscount","complementaryCategories","Desktop","Server","SaaS","missingCategories","compCategories","cat","index","self","indexOf","suggestedProduct","annualRevenue"],"sources":["C:/Users/Hasan/Desktop/vscode/etcalc/src/utils/pricing.js"],"sourcesContent":["// Constants for financial calculations\r\nexport const FINANCIAL_CONSTANTS = {\r\n  ANNUAL_DISCOUNT_RATE: 0.03,\r\n  INDUSTRY_AVG_SERVICE_FEE: 100,\r\n  SERVICE_FEE_THRESHOLD_LOW: 0.8,\r\n  SERVICE_FEE_THRESHOLD_HIGH: 1.2,\r\n  TAX_RATE: 0.13,\r\n  DEFAULT_MARGIN: 0.35,\r\n  MIN_MARGIN: 0.20,\r\n  TARGET_MARGIN: 0.35,\r\n  HIGH_MARGIN: 0.40,\r\n  MIN_PROFIT_THRESHOLD: 200,\r\n  MIN_SERVICE_FEE: 100,\r\n  // Volume discount tiers\r\n  VOLUME_DISCOUNTS: [\r\n    { minQty: 5, discount: 0.05 },  // 5% off for 5+ units\r\n    { minQty: 10, discount: 0.10 }, // 10% off for 10+ units\r\n    { minQty: 20, discount: 0.15 }, // 15% off for 20+ units\r\n    { minQty: 50, discount: 0.20 }  // 20% off for 50+ units\r\n  ],\r\n  // Seasonal pricing periods\r\n  SEASONAL_PRICING: {\r\n    Q1: { name: \"New Year Special\", discount: 0.10, months: [0, 1, 2] },    // Jan-Mar\r\n    Q2: { name: \"Spring Promotion\", discount: 0.05, months: [3, 4, 5] },    // Apr-Jun\r\n    Q3: { name: \"Summer Sale\", discount: 0.15, months: [6, 7, 8] },         // Jul-Sep\r\n    Q4: { name: \"Year-End Deal\", discount: 0.20, months: [9, 10, 11] }      // Oct-Dec\r\n  },\r\n  // Payment processing fee constants\r\n  PAYMENT_PROCESSING: {\r\n    BASE_FEE: 0.30,\r\n    PERCENTAGE_FEE: 0.0299,\r\n    MIN_AMOUNT_FOR_WAIVER: 1000, // Minimum amount to qualify for fee waiver\r\n    ANNUAL_COMMITMENT_WAIVER: true, // Whether annual commitments qualify for fee waiver\r\n    // Tiered processing fees based on monthly transaction volume\r\n    TIERED_FEES: [\r\n      { minVolume: 0, baseFee: 0.30, percentageFee: 0.0299 },\r\n      { minVolume: 10000, baseFee: 0.25, percentageFee: 0.0275 },\r\n      { minVolume: 50000, baseFee: 0.20, percentageFee: 0.0250 },\r\n      { minVolume: 100000, baseFee: 0.15, percentageFee: 0.0225 },\r\n      { minVolume: 500000, baseFee: 0.10, percentageFee: 0.0200 }\r\n    ]\r\n  },\r\n  // Customer loyalty tiers\r\n  LOYALTY_TIERS: {\r\n    BRONZE: {\r\n      name: \"Bronze\",\r\n      minSpend: 0,\r\n      benefits: {\r\n        processingFeeDiscount: 0,\r\n        serviceFeeDiscount: 0,\r\n        specialPromotions: false\r\n      }\r\n    },\r\n    SILVER: {\r\n      name: \"Silver\",\r\n      minSpend: 5000,\r\n      benefits: {\r\n        processingFeeDiscount: 0.25, // 25% off processing fees\r\n        serviceFeeDiscount: 0.10,    // 10% off service fees\r\n        specialPromotions: true\r\n      }\r\n    },\r\n    GOLD: {\r\n      name: \"Gold\",\r\n      minSpend: 20000,\r\n      benefits: {\r\n        processingFeeDiscount: 0.50, // 50% off processing fees\r\n        serviceFeeDiscount: 0.20,    // 20% off service fees\r\n        specialPromotions: true,\r\n        prioritySupport: true\r\n      }\r\n    },\r\n    PLATINUM: {\r\n      name: \"Platinum\",\r\n      minSpend: 50000,\r\n      benefits: {\r\n        processingFeeDiscount: 1.00, // 100% off processing fees\r\n        serviceFeeDiscount: 0.30,    // 30% off service fees\r\n        specialPromotions: true,\r\n        prioritySupport: true,\r\n        dedicatedAccountManager: true\r\n      }\r\n    }\r\n  },\r\n  // Commitment and upsell constants\r\n  COMMITMENT_LEVELS: {\r\n    MONTHLY: {\r\n      name: \"Monthly\",\r\n      discount: 0,\r\n      minTerm: 1,\r\n      cancellationFee: 0\r\n    },\r\n    QUARTERLY: {\r\n      name: \"Quarterly\",\r\n      discount: 0.05,\r\n      minTerm: 3,\r\n      cancellationFee: 0.1\r\n    },\r\n    BIANNUAL: {\r\n      name: \"Bi-Annual\",\r\n      discount: 0.10,\r\n      minTerm: 6,\r\n      cancellationFee: 0.15\r\n    },\r\n    ANNUAL: {\r\n      name: \"Annual\",\r\n      discount: 0.15,\r\n      minTerm: 12,\r\n      cancellationFee: 0.2\r\n    }\r\n  },\r\n  // Upsell opportunities\r\n  UPSELL_OPPORTUNITIES: {\r\n    PREMIUM_SUPPORT: {\r\n      name: \"Premium Support\",\r\n      basePrice: 199,\r\n      margin: 0.75,\r\n      minCommitment: \"QUARTERLY\",\r\n      features: [\r\n        \"24/7 Priority Support\",\r\n        \"Dedicated Account Manager\",\r\n        \"Custom Integration Support\",\r\n        \"Advanced Analytics\"\r\n      ]\r\n    },\r\n    ENTERPRISE_FEATURES: {\r\n      name: \"Enterprise Features\",\r\n      basePrice: 299,\r\n      margin: 0.80,\r\n      minCommitment: \"BIANNUAL\",\r\n      features: [\r\n        \"Custom Workflows\",\r\n        \"API Access\",\r\n        \"Advanced Security\",\r\n        \"Multi-region Support\"\r\n      ]\r\n    },\r\n    TRAINING_PACKAGE: {\r\n      name: \"Training Package\",\r\n      basePrice: 499,\r\n      margin: 0.85,\r\n      minCommitment: \"QUARTERLY\",\r\n      features: [\r\n        \"On-site Training\",\r\n        \"Custom Documentation\",\r\n        \"Best Practices Guide\",\r\n        \"Ongoing Support\"\r\n      ]\r\n    }\r\n  },\r\n  // Profit optimization thresholds\r\n  PROFIT_OPTIMIZATION: {\r\n    MIN_MARGIN: 0.30,\r\n    TARGET_MARGIN: 0.40,\r\n    HIGH_MARGIN: 0.50,\r\n    MIN_COMMITMENT_DISCOUNT: 0.05,\r\n    MAX_COMMITMENT_DISCOUNT: 0.20,\r\n    BUNDLE_DISCOUNT: 0.10,\r\n    REFERRAL_BONUS: 0.05\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate volume discount based on quantity\r\n * @param {number} qty - Quantity\r\n * @returns {number} Discount percentage (0-1)\r\n */\r\nexport const calculateVolumeDiscount = (qty) => {\r\n  const applicableDiscount = FINANCIAL_CONSTANTS.VOLUME_DISCOUNTS\r\n    .filter(tier => qty >= tier.minQty)\r\n    .sort((a, b) => b.discount - a.discount)[0];\r\n  \r\n  return applicableDiscount ? applicableDiscount.discount : 0;\r\n};\r\n\r\n/**\r\n * Get current seasonal pricing period\r\n * @returns {Object} Seasonal pricing period info\r\n */\r\nexport const getCurrentSeasonalPricing = () => {\r\n  const currentMonth = new Date().getMonth();\r\n  return Object.values(FINANCIAL_CONSTANTS.SEASONAL_PRICING)\r\n    .find(period => period.months.includes(currentMonth)) || \r\n    { name: \"Standard Pricing\", discount: 0 };\r\n};\r\n\r\n/**\r\n * Get pricing data for a product based on quantity\r\n * @param {Object} product - Product object\r\n * @param {number} qty - Quantity\r\n * @returns {Object} Pricing slab data with discounts applied\r\n * @throws {Error} If product or quantity is invalid\r\n */\r\nexport const getPricingData = (product, qty) => {\r\n  if (!product || !product.pricingSlabs) {\r\n    throw new Error('Invalid product data');\r\n  }\r\n  \r\n  if (!Number.isInteger(qty) || qty < 1) {\r\n    throw new Error('Quantity must be a positive integer');\r\n  }\r\n\r\n  // Validate pricing slabs\r\n  product.pricingSlabs.forEach(slab => {\r\n    if (slab.unitCost < 0) {\r\n      throw new Error(`Invalid unit cost (${slab.unitCost}) for product ${product.name}`);\r\n    }\r\n    if (slab.margin < FINANCIAL_CONSTANTS.MIN_MARGIN) {\r\n      throw new Error(`Margin (${slab.margin}) below minimum threshold for product ${product.name}`);\r\n    }\r\n  });\r\n\r\n  const slab = product.pricingSlabs.find(\r\n    slab => qty >= slab.minQty && qty <= slab.maxQty\r\n  ) || product.pricingSlabs[product.pricingSlabs.length - 1];\r\n\r\n  // Calculate discounts\r\n  const volumeDiscount = calculateVolumeDiscount(qty);\r\n  const seasonalPricing = getCurrentSeasonalPricing();\r\n  const totalDiscount = Math.min(volumeDiscount + seasonalPricing.discount, 0.30); // Cap total discount at 30%\r\n\r\n  // Apply discounts to recommended price\r\n  const discountedPrice = slab.recommendedPrice * (1 - totalDiscount);\r\n\r\n  return {\r\n    ...slab,\r\n    recommendedPrice: formatCurrency(discountedPrice),\r\n    volumeDiscount,\r\n    seasonalDiscount: seasonalPricing.discount,\r\n    totalDiscount,\r\n    seasonalPeriod: seasonalPricing.name\r\n  };\r\n};\r\n\r\n/**\r\n * Get package name based on number of products\r\n * @param {Array} products - Array of products\r\n * @returns {string} Package name\r\n */\r\nexport const getPackageName = (products) => {\r\n  if (!Array.isArray(products)) {\r\n    throw new Error('Invalid products array');\r\n  }\r\n  return products.length >= 2 ? \"Backup Total\" : \"Backup Basic\";\r\n};\r\n\r\n/**\r\n * Calculate total cost with proper decimal handling\r\n * @param {number} amount - Amount to format\r\n * @returns {number} Formatted amount with 2 decimal places\r\n */\r\nexport const formatCurrency = (amount) => {\r\n  if (typeof amount !== 'number' || isNaN(amount)) {\r\n    throw new Error('Invalid amount for currency formatting');\r\n  }\r\n  if (!isFinite(amount)) {\r\n    throw new Error('Amount must be a finite number');\r\n  }\r\n  return Number(Math.round(amount + 'e2') + 'e-2');\r\n};\r\n\r\n/**\r\n * Get customer loyalty tier based on total spend\r\n * @param {number} totalSpend - Total customer spend\r\n * @returns {Object} Loyalty tier details\r\n */\r\nexport const getLoyaltyTier = (totalSpend) => {\r\n  const tiers = Object.entries(FINANCIAL_CONSTANTS.LOYALTY_TIERS)\r\n    .sort(([, a], [, b]) => b.minSpend - a.minSpend);\r\n\r\n  for (const [, tier] of tiers) {\r\n    if (totalSpend >= tier.minSpend) {\r\n      return tier;\r\n    }\r\n  }\r\n  return FINANCIAL_CONSTANTS.LOYALTY_TIERS.BRONZE;\r\n};\r\n\r\n/**\r\n * Get tiered processing fee based on monthly volume\r\n * @param {number} monthlyVolume - Monthly transaction volume\r\n * @returns {Object} Fee tier details\r\n */\r\nexport const getProcessingFeeTier = (monthlyVolume) => {\r\n  const tiers = FINANCIAL_CONSTANTS.PAYMENT_PROCESSING.TIERED_FEES\r\n    .sort((a, b) => b.minVolume - a.minVolume);\r\n\r\n  for (const tier of tiers) {\r\n    if (monthlyVolume >= tier.minVolume) {\r\n      return tier;\r\n    }\r\n  }\r\n  return tiers[tiers.length - 1];\r\n};\r\n\r\n/**\r\n * Calculate payment processing fee\r\n * @param {number} amount - Transaction amount\r\n * @param {boolean} isAnnual - Whether this is an annual commitment\r\n * @param {boolean} waiveFees - Whether to waive the fees\r\n * @param {number} monthlyVolume - Monthly transaction volume\r\n * @param {number} totalSpend - Total customer spend\r\n * @returns {Object} Fee details\r\n */\r\nexport const calculatePaymentProcessingFee = (amount, isAnnual, waiveFees, monthlyVolume = 0, totalSpend = 0) => {\r\n  if (waiveFees) {\r\n    return {\r\n      fee: 0,\r\n      percentage: 0,\r\n      baseFee: 0,\r\n      isWaived: true,\r\n      reason: isAnnual ? \"Annual commitment\" : \"Fee waiver applied\"\r\n    };\r\n  }\r\n\r\n  // Get applicable fee tier\r\n  const feeTier = getProcessingFeeTier(monthlyVolume);\r\n  const baseFee = feeTier.baseFee;\r\n  const percentageFee = amount * feeTier.percentageFee;\r\n  const totalFee = baseFee + percentageFee;\r\n\r\n  // Get loyalty tier benefits\r\n  const loyaltyTier = getLoyaltyTier(totalSpend);\r\n  const loyaltyDiscount = loyaltyTier.benefits.processingFeeDiscount;\r\n  const discountedFee = totalFee * (1 - loyaltyDiscount);\r\n\r\n  // Check if amount qualifies for automatic waiver\r\n  const qualifiesForWaiver = amount >= FINANCIAL_CONSTANTS.PAYMENT_PROCESSING.MIN_AMOUNT_FOR_WAIVER ||\r\n    (isAnnual && FINANCIAL_CONSTANTS.PAYMENT_PROCESSING.ANNUAL_COMMITMENT_WAIVER) ||\r\n    loyaltyTier.name === \"PLATINUM\";\r\n\r\n  return {\r\n    fee: qualifiesForWaiver ? 0 : discountedFee,\r\n    percentage: feeTier.percentageFee,\r\n    baseFee,\r\n    isWaived: qualifiesForWaiver,\r\n    reason: qualifiesForWaiver ? \r\n      (isAnnual ? \"Annual commitment\" : \r\n       loyaltyTier.name === \"PLATINUM\" ? \"Platinum tier benefit\" :\r\n       \"Amount exceeds minimum threshold\") : \r\n      \"Standard processing fee\",\r\n    loyaltyTier: loyaltyTier.name,\r\n    feeTier: `$${feeTier.minVolume.toLocaleString()}+`,\r\n    originalFee: totalFee,\r\n    loyaltyDiscount: loyaltyDiscount * 100\r\n  };\r\n};\r\n\r\n/**\r\n * Calculate fee savings analytics\r\n * @param {Object} feeDetails - Fee calculation details\r\n * @param {number} monthlyVolume - Monthly transaction volume\r\n * @param {number} totalSpend - Total customer spend\r\n * @returns {Object} Fee savings analytics\r\n */\r\nexport const calculateFeeSavings = (feeDetails, monthlyVolume, totalSpend) => {\r\n  const currentTier = getLoyaltyTier(totalSpend);\r\n  const currentFeeTier = getProcessingFeeTier(monthlyVolume);\r\n  \r\n  // Calculate potential savings from next loyalty tier\r\n  const nextLoyaltyTier = Object.entries(FINANCIAL_CONSTANTS.LOYALTY_TIERS)\r\n    .find(([, tier]) => tier.minSpend > currentTier.minSpend);\r\n  \r\n  let loyaltySavings = {\r\n    current: {\r\n      tier: currentTier.name,\r\n      discount: currentTier.benefits.processingFeeDiscount * 100,\r\n      monthlySavings: feeDetails.originalFee * currentTier.benefits.processingFeeDiscount,\r\n      annualSavings: feeDetails.originalFee * currentTier.benefits.processingFeeDiscount * 12\r\n    },\r\n    next: null\r\n  };\r\n\r\n  if (nextLoyaltyTier) {\r\n    const [, nextTierData] = nextLoyaltyTier;\r\n    const nextTierDiscount = nextTierData.benefits.processingFeeDiscount;\r\n    const potentialMonthlySavings = feeDetails.originalFee * nextTierDiscount;\r\n    const currentMonthlySavings = feeDetails.originalFee * currentTier.benefits.processingFeeDiscount;\r\n    \r\n    loyaltySavings.next = {\r\n      tier: nextTierData.name,\r\n      discount: nextTierDiscount * 100,\r\n      additionalMonthlySavings: potentialMonthlySavings - currentMonthlySavings,\r\n      additionalAnnualSavings: (potentialMonthlySavings - currentMonthlySavings) * 12,\r\n      requiredSpend: nextTierData.minSpend - totalSpend\r\n    };\r\n  }\r\n\r\n  // Calculate potential savings from next fee tier\r\n  const nextFeeTier = FINANCIAL_CONSTANTS.PAYMENT_PROCESSING.TIERED_FEES\r\n    .find(tier => tier.minVolume > currentFeeTier.minVolume);\r\n  \r\n  let volumeSavings = {\r\n    current: {\r\n      tier: `$${currentFeeTier.minVolume.toLocaleString()}+`,\r\n      rate: currentFeeTier.percentageFee * 100,\r\n      baseFee: currentFeeTier.baseFee,\r\n      monthlyFees: feeDetails.originalFee,\r\n      annualFees: feeDetails.originalFee * 12\r\n    },\r\n    next: null\r\n  };\r\n\r\n  if (nextFeeTier) {\r\n    const potentialBaseFee = nextFeeTier.baseFee;\r\n    const potentialPercentageFee = monthlyVolume * nextFeeTier.percentageFee;\r\n    const potentialMonthlyFees = potentialBaseFee + potentialPercentageFee;\r\n    const currentMonthlyFees = feeDetails.originalFee;\r\n    \r\n    volumeSavings.next = {\r\n      tier: `$${nextFeeTier.minVolume.toLocaleString()}+`,\r\n      rate: nextFeeTier.percentageFee * 100,\r\n      baseFee: nextFeeTier.baseFee,\r\n      potentialMonthlyFees,\r\n      potentialAnnualFees: potentialMonthlyFees * 12,\r\n      monthlySavings: currentMonthlyFees - potentialMonthlyFees,\r\n      annualSavings: (currentMonthlyFees - potentialMonthlyFees) * 12,\r\n      requiredVolume: nextFeeTier.minVolume - monthlyVolume\r\n    };\r\n  }\r\n\r\n  // Calculate total savings\r\n  const totalSavings = {\r\n    current: {\r\n      monthly: loyaltySavings.current.monthlySavings,\r\n      annual: loyaltySavings.current.annualSavings,\r\n      percentage: (loyaltySavings.current.monthlySavings / feeDetails.originalFee) * 100\r\n    },\r\n    potential: {\r\n      monthly: (loyaltySavings.next?.additionalMonthlySavings || 0) + \r\n               (volumeSavings.next?.monthlySavings || 0),\r\n      annual: (loyaltySavings.next?.additionalAnnualSavings || 0) + \r\n              (volumeSavings.next?.annualSavings || 0),\r\n      percentage: ((loyaltySavings.next?.additionalMonthlySavings || 0) + \r\n                  (volumeSavings.next?.monthlySavings || 0)) / feeDetails.originalFee * 100\r\n    }\r\n  };\r\n\r\n  return {\r\n    loyaltySavings,\r\n    volumeSavings,\r\n    totalSavings,\r\n    recommendations: generateSavingsRecommendations(loyaltySavings, volumeSavings)\r\n  };\r\n};\r\n\r\n/**\r\n * Generate savings recommendations\r\n * @param {Object} loyaltySavings - Loyalty tier savings details\r\n * @param {Object} volumeSavings - Volume tier savings details\r\n * @returns {Array} Array of savings recommendations\r\n */\r\nconst generateSavingsRecommendations = (loyaltySavings, volumeSavings) => {\r\n  const recommendations = [];\r\n\r\n  if (loyaltySavings.next) {\r\n    recommendations.push({\r\n      type: 'loyalty',\r\n      message: `Upgrade to ${loyaltySavings.next.tier} tier by spending $${loyaltySavings.next.requiredSpend.toFixed(2)} more to save an additional $${loyaltySavings.next.additionalMonthlySavings.toFixed(2)}/month on processing fees.`,\r\n      potentialSavings: {\r\n        monthly: loyaltySavings.next.additionalMonthlySavings,\r\n        annual: loyaltySavings.next.additionalAnnualSavings\r\n      }\r\n    });\r\n  }\r\n\r\n  if (volumeSavings.next) {\r\n    recommendations.push({\r\n      type: 'volume',\r\n      message: `Increase monthly volume by $${volumeSavings.next.requiredVolume.toFixed(2)} to qualify for the ${volumeSavings.next.tier} tier and save $${volumeSavings.next.monthlySavings.toFixed(2)}/month on processing fees.`,\r\n      potentialSavings: {\r\n        monthly: volumeSavings.next.monthlySavings,\r\n        annual: volumeSavings.next.annualSavings\r\n      }\r\n    });\r\n  }\r\n\r\n  return recommendations;\r\n};\r\n\r\n/**\r\n * Generate detailed fee report\r\n * @param {Object} feeDetails - Fee calculation details\r\n * @param {number} monthlyVolume - Monthly transaction volume\r\n * @param {number} totalSpend - Total customer spend\r\n * @returns {Object} Detailed fee report\r\n */\r\nexport const generateFeeReport = (feeDetails, monthlyVolume, totalSpend) => {\r\n  const savings = calculateFeeSavings(feeDetails, monthlyVolume, totalSpend);\r\n  \r\n  return {\r\n    currentFees: {\r\n      baseFee: feeDetails.baseFee,\r\n      percentageFee: feeDetails.percentage * 100,\r\n      totalFee: feeDetails.fee,\r\n      isWaived: feeDetails.isWaived,\r\n      waiverReason: feeDetails.reason\r\n    },\r\n    currentSavings: {\r\n      loyaltyTier: savings.loyaltySavings.current.tier,\r\n      loyaltyDiscount: savings.loyaltySavings.current.discount,\r\n      monthlySavings: savings.loyaltySavings.current.monthlySavings,\r\n      annualSavings: savings.loyaltySavings.current.annualSavings\r\n    },\r\n    potentialSavings: {\r\n      loyaltyUpgrade: savings.loyaltySavings.next ? {\r\n        tier: savings.loyaltySavings.next.tier,\r\n        additionalDiscount: savings.loyaltySavings.next.discount - savings.loyaltySavings.current.discount,\r\n        monthlySavings: savings.loyaltySavings.next.additionalMonthlySavings,\r\n        annualSavings: savings.loyaltySavings.next.additionalAnnualSavings,\r\n        requiredSpend: savings.loyaltySavings.next.requiredSpend\r\n      } : null,\r\n      volumeUpgrade: savings.volumeSavings.next ? {\r\n        tier: savings.volumeSavings.next.tier,\r\n        newRate: savings.volumeSavings.next.rate,\r\n        newBaseFee: savings.volumeSavings.next.baseFee,\r\n        monthlySavings: savings.volumeSavings.next.monthlySavings,\r\n        annualSavings: savings.volumeSavings.next.annualSavings,\r\n        requiredVolume: savings.volumeSavings.next.requiredVolume\r\n      } : null\r\n    },\r\n    totalSavings: {\r\n      current: {\r\n        monthly: savings.totalSavings.current.monthly,\r\n        annual: savings.totalSavings.current.annual,\r\n        percentage: savings.totalSavings.current.percentage\r\n      },\r\n      potential: {\r\n        monthly: savings.totalSavings.potential.monthly,\r\n        annual: savings.totalSavings.potential.annual,\r\n        percentage: savings.totalSavings.potential.percentage\r\n      }\r\n    },\r\n    recommendations: savings.recommendations\r\n  };\r\n};\r\n\r\n/**\r\n * Calculate commitment-based pricing\r\n * @param {number} basePrice - Base price of the product\r\n * @param {string} commitmentLevel - Commitment level (MONTHLY, QUARTERLY, etc.)\r\n * @param {number} quantity - Number of units\r\n * @returns {Object} Commitment pricing details\r\n */\r\nexport const calculateCommitmentPricing = (basePrice, commitmentLevel, quantity) => {\r\n  const commitment = FINANCIAL_CONSTANTS.COMMITMENT_LEVELS[commitmentLevel];\r\n  if (!commitment) {\r\n    throw new Error('Invalid commitment level');\r\n  }\r\n\r\n  const discount = commitment.discount;\r\n  const discountedPrice = basePrice * (1 - discount);\r\n  const totalPrice = discountedPrice * quantity;\r\n  const savings = basePrice * quantity - totalPrice;\r\n\r\n  return {\r\n    commitmentLevel: commitment.name,\r\n    basePrice,\r\n    discountedPrice,\r\n    quantity,\r\n    totalPrice,\r\n    savings,\r\n    discount: discount * 100,\r\n    minTerm: commitment.minTerm,\r\n    cancellationFee: commitment.cancellationFee * 100\r\n  };\r\n};\r\n\r\n/**\r\n * Get available upsell opportunities\r\n * @param {Array} currentProducts - Current product selection\r\n * @param {string} commitmentLevel - Current commitment level\r\n * @param {number} totalSpend - Total customer spend\r\n * @returns {Array} Available upsell opportunities\r\n */\r\nexport const getUpsellOpportunities = (currentProducts, commitmentLevel, totalSpend) => {\r\n  const opportunities = [];\r\n  const currentFeatures = new Set(currentProducts.flatMap(p => p.features || []));\r\n  \r\n  Object.entries(FINANCIAL_CONSTANTS.UPSELL_OPPORTUNITIES).forEach(([key, opportunity]) => {\r\n    // Check if customer qualifies for this upsell\r\n    const commitment = FINANCIAL_CONSTANTS.COMMITMENT_LEVELS[opportunity.minCommitment];\r\n    const qualifies = commitment && \r\n      FINANCIAL_CONSTANTS.COMMITMENT_LEVELS[commitmentLevel].minTerm >= commitment.minTerm;\r\n\r\n    if (qualifies) {\r\n      const newFeatures = opportunity.features.filter(f => !currentFeatures.has(f));\r\n      if (newFeatures.length > 0) {\r\n        opportunities.push({\r\n          ...opportunity,\r\n          key,\r\n          newFeatures,\r\n          price: calculateCommitmentPricing(\r\n            opportunity.basePrice,\r\n            commitmentLevel,\r\n            1\r\n          ),\r\n          potentialRevenue: opportunity.basePrice * (1 - FINANCIAL_CONSTANTS.COMMITMENT_LEVELS[commitmentLevel].discount),\r\n          margin: opportunity.margin * 100\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n  return opportunities;\r\n};\r\n\r\n/**\r\n * Calculate optimal pricing strategy\r\n * @param {Object} product - Product details\r\n * @param {number} quantity - Current quantity\r\n * @param {string} commitmentLevel - Current commitment level\r\n * @param {number} totalSpend - Total customer spend\r\n * @returns {Object} Optimal pricing strategy\r\n */\r\nexport const calculateOptimalPricing = (product, quantity, commitmentLevel, totalSpend) => {\r\n  const currentMargin = getPricingData(product, quantity).margin;\r\n  const loyaltyTier = getLoyaltyTier(totalSpend);\r\n  const commitment = FINANCIAL_CONSTANTS.COMMITMENT_LEVELS[commitmentLevel];\r\n  \r\n  const strategies = {\r\n    quantity: {\r\n      current: quantity,\r\n      recommended: quantity,\r\n      potential: 0\r\n    },\r\n    commitment: {\r\n      current: commitmentLevel,\r\n      recommended: commitmentLevel,\r\n      potential: 0\r\n    },\r\n    upsells: [],\r\n    totalPotential: 0\r\n  };\r\n\r\n  // Quantity optimization\r\n  if (currentMargin < FINANCIAL_CONSTANTS.PROFIT_OPTIMIZATION.TARGET_MARGIN) {\r\n    const nextVolumeTier = FINANCIAL_CONSTANTS.VOLUME_DISCOUNTS\r\n      .find(tier => tier.minQty > quantity);\r\n    \r\n    if (nextVolumeTier) {\r\n      strategies.quantity.recommended = nextVolumeTier.minQty;\r\n      strategies.quantity.potential = (nextVolumeTier.minQty - quantity) * \r\n        product.pricingSlabs[0].recommendedPrice;\r\n    }\r\n  }\r\n\r\n  // Commitment optimization\r\n  const nextCommitment = Object.entries(FINANCIAL_CONSTANTS.COMMITMENT_LEVELS)\r\n    .find(([key, level]) => level.minTerm > commitment.minTerm);\r\n  \r\n  if (nextCommitment) {\r\n    const [nextLevel, nextCommitmentData] = nextCommitment;\r\n    strategies.commitment.recommended = nextLevel;\r\n    strategies.commitment.potential = product.pricingSlabs[0].recommendedPrice * \r\n      quantity * (nextCommitmentData.discount - commitment.discount);\r\n  }\r\n\r\n  // Upsell opportunities\r\n  strategies.upsells = getUpsellOpportunities([product], commitmentLevel, totalSpend)\r\n    .map(upsell => ({\r\n      name: upsell.name,\r\n      potential: upsell.potentialRevenue,\r\n      margin: upsell.margin,\r\n      features: upsell.newFeatures\r\n    }));\r\n\r\n  // Calculate total potential\r\n  strategies.totalPotential = strategies.quantity.potential + \r\n    strategies.commitment.potential + \r\n    strategies.upsells.reduce((sum, upsell) => sum + upsell.potential, 0);\r\n\r\n  return strategies;\r\n};\r\n\r\n/**\r\n * Generate profit optimization recommendations\r\n * @param {Array} products - Current product selection\r\n * @param {string} commitmentLevel - Current commitment level\r\n * @param {number} totalSpend - Total customer spend\r\n * @returns {Array} Profit optimization recommendations\r\n */\r\nexport const getProfitOptimizationRecommendations = (products, commitmentLevel, totalSpend) => {\r\n  const recommendations = [];\r\n  \r\n  // Analyze each product\r\n  products.forEach(product => {\r\n    const optimalPricing = calculateOptimalPricing(\r\n      product,\r\n      product.qty,\r\n      commitmentLevel,\r\n      totalSpend\r\n    );\r\n\r\n    // Quantity recommendations\r\n    if (optimalPricing.quantity.recommended > optimalPricing.quantity.current) {\r\n      recommendations.push({\r\n        type: 'quantity',\r\n        product: product.name,\r\n        message: `Increase ${product.name} quantity to ${optimalPricing.quantity.recommended} units to qualify for volume discount and improve margin.`,\r\n        potential: optimalPricing.quantity.potential\r\n      });\r\n    }\r\n\r\n    // Commitment recommendations\r\n    if (optimalPricing.commitment.recommended !== optimalPricing.commitment.current) {\r\n      const nextCommitment = FINANCIAL_CONSTANTS.COMMITMENT_LEVELS[optimalPricing.commitment.recommended];\r\n      recommendations.push({\r\n        type: 'commitment',\r\n        message: `Upgrade to ${nextCommitment.name} commitment to get ${(nextCommitment.discount * 100).toFixed(0)}% discount and improve profitability.`,\r\n        potential: optimalPricing.commitment.potential\r\n      });\r\n    }\r\n\r\n    // Upsell recommendations\r\n    optimalPricing.upsells.forEach(upsell => {\r\n      recommendations.push({\r\n        type: 'upsell',\r\n        name: upsell.name,\r\n        message: `Add ${upsell.name} to get ${upsell.features.join(', ')}.`,\r\n        potential: upsell.potential,\r\n        margin: upsell.margin\r\n      });\r\n    });\r\n  });\r\n\r\n  // Sort recommendations by potential value\r\n  return recommendations.sort((a, b) => b.potential - a.potential);\r\n};\r\n\r\n/**\r\n * Calculate total cost with all discounts and fees\r\n * @param {Object} product - Product object\r\n * @param {number} qty - Quantity\r\n * @param {boolean} isAnnual - Whether this is an annual commitment\r\n * @param {boolean} waiveFees - Whether to waive processing fees\r\n * @param {number} monthlyVolume - Monthly transaction volume\r\n * @param {number} totalSpend - Total customer spend\r\n * @returns {Object} Complete pricing details\r\n */\r\nexport const calculateTotalCost = (product, qty, isAnnual, waiveFees, monthlyVolume = 0, totalSpend = 0) => {\r\n  const pricingData = getPricingData(product, qty);\r\n  const subtotal = pricingData.recommendedPrice * qty;\r\n  const tax = subtotal * FINANCIAL_CONSTANTS.TAX_RATE;\r\n  const processingFee = calculatePaymentProcessingFee(subtotal + tax, isAnnual, waiveFees, monthlyVolume, totalSpend);\r\n  const loyaltyTier = getLoyaltyTier(totalSpend);\r\n  const feeReport = generateFeeReport(processingFee, monthlyVolume, totalSpend);\r\n  \r\n  // Calculate commitment level\r\n  const commitmentLevel = isAnnual ? 'ANNUAL' : 'MONTHLY';\r\n  const commitmentPricing = calculateCommitmentPricing(pricingData.recommendedPrice, commitmentLevel, qty);\r\n  \r\n  // Get upsell opportunities\r\n  const upsellOpportunities = getUpsellOpportunities([product], commitmentLevel, totalSpend);\r\n  \r\n  // Get profit optimization recommendations\r\n  const profitRecommendations = getProfitOptimizationRecommendations([product], commitmentLevel, totalSpend);\r\n  \r\n  return {\r\n    subtotal,\r\n    tax,\r\n    processingFee: processingFee.fee,\r\n    total: subtotal + tax + processingFee.fee,\r\n    discounts: {\r\n      volume: pricingData.volumeDiscount,\r\n      seasonal: pricingData.seasonalDiscount,\r\n      total: pricingData.totalDiscount,\r\n      commitment: commitmentPricing.discount\r\n    },\r\n    fees: {\r\n      processing: processingFee,\r\n      tax: FINANCIAL_CONSTANTS.TAX_RATE\r\n    },\r\n    loyalty: {\r\n      tier: loyaltyTier.name,\r\n      benefits: loyaltyTier.benefits\r\n    },\r\n    commitment: commitmentPricing,\r\n    upsellOpportunities,\r\n    profitRecommendations,\r\n    feeReport,\r\n    isAnnual,\r\n    quantity: qty\r\n  };\r\n};\r\n\r\n/**\r\n * Get business recommendations based on current configuration\r\n * @param {Array} products - Array of selected products\r\n * @param {number} serviceCharge - Service charge amount\r\n * @param {string} billingCycle - Billing cycle (monthly/annual)\r\n * @param {number} profitBeforeTax - Profit before tax\r\n * @param {number} totalSpend - Total customer spend\r\n * @param {number} monthlyVolume - Monthly transaction volume\r\n * @returns {Array} Array of recommendations\r\n */\r\nexport const getRecommendations = (products, serviceCharge, billingCycle, profitBeforeTax, totalSpend = 0, monthlyVolume = 0) => {\r\n  if (!Array.isArray(products) || typeof serviceCharge !== 'number' || \r\n      !['monthly', 'annual'].includes(billingCycle) || typeof profitBeforeTax !== 'number') {\r\n    throw new Error('Invalid input parameters');\r\n  }\r\n\r\n  const recommendations = [];\r\n  const selectedCategories = products.map(p => p.category);\r\n  const currentSeason = getCurrentSeasonalPricing();\r\n  const isAnnual = billingCycle === 'annual';\r\n\r\n  // Calculate total amount for fee waiver recommendations\r\n  const totalAmount = products.reduce((sum, p) => {\r\n    const pricingData = getPricingData(p, p.qty);\r\n    return sum + (pricingData.recommendedPrice * p.qty);\r\n  }, 0);\r\n\r\n  // Loyalty tier recommendations\r\n  const currentTier = getLoyaltyTier(totalSpend);\r\n  const nextTier = Object.entries(FINANCIAL_CONSTANTS.LOYALTY_TIERS)\r\n    .find(([, tier]) => tier.minSpend > currentTier.minSpend);\r\n\r\n  if (nextTier) {\r\n    const [, nextTierData] = nextTier;\r\n    const remainingForNextTier = nextTierData.minSpend - totalSpend;\r\n    recommendations.push(\r\n      `Add $${remainingForNextTier.toFixed(2)} more to your total spend to reach ${nextTierData.name} tier and get ${(nextTierData.benefits.processingFeeDiscount * 100).toFixed(0)}% off processing fees.`\r\n    );\r\n  }\r\n\r\n  // Volume-based fee tier recommendations\r\n  const currentFeeTier = getProcessingFeeTier(monthlyVolume);\r\n  const nextFeeTier = FINANCIAL_CONSTANTS.PAYMENT_PROCESSING.TIERED_FEES\r\n    .find(tier => tier.minVolume > currentFeeTier.minVolume);\r\n\r\n  if (nextFeeTier) {\r\n    const remainingForNextTier = nextFeeTier.minVolume - monthlyVolume;\r\n    recommendations.push(\r\n      `Increase your monthly volume by $${remainingForNextTier.toFixed(2)} to qualify for lower processing fees (${(nextFeeTier.percentageFee * 100).toFixed(2)}% + $${nextFeeTier.baseFee.toFixed(2)}).`\r\n    );\r\n  }\r\n\r\n  // Payment processing fee recommendations\r\n  if (!isAnnual && totalAmount < FINANCIAL_CONSTANTS.PAYMENT_PROCESSING.MIN_AMOUNT_FOR_WAIVER) {\r\n    const remainingForWaiver = FINANCIAL_CONSTANTS.PAYMENT_PROCESSING.MIN_AMOUNT_FOR_WAIVER - totalAmount;\r\n    recommendations.push(\r\n      `Add $${remainingForWaiver.toFixed(2)} more to your order to qualify for automatic payment processing fee waiver.`\r\n    );\r\n  }\r\n\r\n  if (!isAnnual && FINANCIAL_CONSTANTS.PAYMENT_PROCESSING.ANNUAL_COMMITMENT_WAIVER) {\r\n    recommendations.push(\r\n      \"Switch to annual billing to automatically waive payment processing fees.\"\r\n    );\r\n  }\r\n\r\n  // Add seasonal pricing recommendation\r\n  if (currentSeason.discount > 0) {\r\n    recommendations.push(\r\n      `Take advantage of our ${currentSeason.name} with ${(currentSeason.discount * 100).toFixed(0)}% off!`\r\n    );\r\n  }\r\n\r\n  // Volume discount recommendations\r\n  products.forEach(p => {\r\n    const nextVolumeTier = FINANCIAL_CONSTANTS.VOLUME_DISCOUNTS\r\n      .find(tier => tier.minQty > p.qty);\r\n    \r\n    if (nextVolumeTier) {\r\n      const additionalQty = nextVolumeTier.minQty - p.qty;\r\n      const potentialDiscount = nextVolumeTier.discount;\r\n      recommendations.push(\r\n        `Add ${additionalQty} more ${p.name} units to qualify for ${(potentialDiscount * 100).toFixed(0)}% volume discount.`\r\n      );\r\n    }\r\n  });\r\n\r\n  // 1. Margin improvement\r\n  const lowMarginProducts = products.filter(p => getPricingData(p, p.qty).margin < FINANCIAL_CONSTANTS.TARGET_MARGIN);\r\n  if (lowMarginProducts.length > 0) {\r\n    lowMarginProducts.forEach(p => {\r\n      const currentMargin = getPricingData(p, p.qty).margin;\r\n      recommendations.push(\r\n        `Increase the margin for \"${p.name}\" (currently ${(currentMargin * 100).toFixed(1)}%) to at least ${(FINANCIAL_CONSTANTS.TARGET_MARGIN * 100).toFixed(1)}% to improve profitability.`\r\n      );\r\n    });\r\n  }\r\n\r\n  // 2. Upsell higher-margin products\r\n  const highMarginProducts = products.filter(p => getPricingData(p, p.qty).margin >= FINANCIAL_CONSTANTS.HIGH_MARGIN);\r\n  if (highMarginProducts.length > 0) {\r\n    highMarginProducts.forEach(p => {\r\n      const margin = getPricingData(p, p.qty).margin;\r\n      recommendations.push(`Focus on upselling \"${p.name}\" (margin ${(margin * 100).toFixed(1)}%) for better profit.`);\r\n    });\r\n  }\r\n\r\n  // 3. Bundle services\r\n  if (products.length > 1) {\r\n    const bundleDiscount = FINANCIAL_CONSTANTS.ANNUAL_DISCOUNT_RATE * 100;\r\n    recommendations.push(\r\n      `Bundle multiple products/services for a more attractive offer. Consider offering a ${bundleDiscount}% discount for annual commitments.`\r\n    );\r\n  }\r\n\r\n  // 4. Service charge review\r\n  if (serviceCharge < FINANCIAL_CONSTANTS.MIN_SERVICE_FEE) {\r\n    recommendations.push(\r\n      `Consider increasing your Professional Services & Support fee to at least $${FINANCIAL_CONSTANTS.MIN_SERVICE_FEE}/year to match industry averages.`\r\n    );\r\n  }\r\n\r\n  // 5. Profitability check\r\n  if (profitBeforeTax < 0) {\r\n    recommendations.push(\"Warning: Your current configuration is not profitable. Review your pricing and costs.\");\r\n  } else if (profitBeforeTax < FINANCIAL_CONSTANTS.MIN_PROFIT_THRESHOLD) {\r\n    recommendations.push(\r\n      `Your profit ($${profitBeforeTax.toFixed(2)}) is below the recommended threshold of $${FINANCIAL_CONSTANTS.MIN_PROFIT_THRESHOLD}. Consider increasing margins or service fees, or reducing costs.`\r\n    );\r\n  } else {\r\n    recommendations.push(\r\n      `Your configuration is profitable ($${profitBeforeTax.toFixed(2)}). Look for further upsell opportunities or cost optimizations.`\r\n    );\r\n  }\r\n\r\n  // 6. Complementary product recommendations\r\n  const complementaryCategories = {\r\n    Desktop: [\"Server\", \"SaaS\"],\r\n    Server: [\"SaaS\", \"Virtual Server\"],\r\n    \"Virtual Server\": [\"SaaS\"],\r\n    SaaS: [\"Server\", \"Virtual Server\"],\r\n  };\r\n\r\n  const missingCategories = Object.entries(complementaryCategories)\r\n    .filter(([category]) => selectedCategories.includes(category))\r\n    .flatMap(([, compCategories]) => \r\n      compCategories.filter(cat => !selectedCategories.includes(cat))\r\n    )\r\n    .filter((cat, index, self) => self.indexOf(cat) === index);\r\n\r\n  if (missingCategories.length > 0) {\r\n    const suggestedProduct = products.find(p => missingCategories.includes(p.category));\r\n    if (suggestedProduct) {\r\n      const potentialRevenue = formatCurrency(suggestedProduct.pricingSlabs[0].recommendedPrice * 5);\r\n      const annualRevenue = billingCycle === 'annual' ? \r\n        formatCurrency(potentialRevenue * 12) : \r\n        potentialRevenue;\r\n      \r\n      recommendations.push(\r\n        `Enhance your solution by adding a \"${suggestedProduct.category}\" product like \"${suggestedProduct.name}\". ` +\r\n        `This can provide a more comprehensive backup strategy and increase your revenue by approximately $${annualRevenue} ${billingCycle === 'annual' ? 'per year' : 'per month'} for 5 units.`\r\n      );\r\n    }\r\n  }\r\n\r\n  return recommendations;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}