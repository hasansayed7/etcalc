{"ast":null,"code":"// Constants for financial calculations\nexport const FINANCIAL_CONSTANTS = {\n  ANNUAL_DISCOUNT_RATE: 0.03,\n  INDUSTRY_AVG_SERVICE_FEE: 100,\n  SERVICE_FEE_THRESHOLD_LOW: 0.8,\n  SERVICE_FEE_THRESHOLD_HIGH: 1.2,\n  TAX_RATE: 0.13,\n  DEFAULT_MARGIN: 0.35\n};\n\n/**\r\n * Get pricing data for a product based on quantity\r\n * @param {Object} product - Product object\r\n * @param {number} qty - Quantity\r\n * @returns {Object} Pricing slab data\r\n * @throws {Error} If product or quantity is invalid\r\n */\nexport const getPricingData = (product, qty) => {\n  if (!product || !product.pricingSlabs) {\n    throw new Error('Invalid product data');\n  }\n  if (!Number.isInteger(qty) || qty < 1) {\n    throw new Error('Quantity must be a positive integer');\n  }\n  const slab = product.pricingSlabs.find(slab => qty >= slab.minQty && qty <= slab.maxQty);\n  return slab || product.pricingSlabs[product.pricingSlabs.length - 1];\n};\n\n/**\r\n * Get package name based on number of products\r\n * @param {Array} products - Array of products\r\n * @returns {string} Package name\r\n */\nexport const getPackageName = products => {\n  if (!Array.isArray(products)) {\n    throw new Error('Invalid products array');\n  }\n  return products.length >= 2 ? \"Backup Total\" : \"Backup Basic\";\n};\n\n/**\r\n * Calculate total cost with proper decimal handling\r\n * @param {number} amount - Amount to format\r\n * @returns {number} Formatted amount with 2 decimal places\r\n */\nexport const formatCurrency = amount => {\n  return Number(Math.round(amount + 'e2') + 'e-2');\n};\n\n/**\r\n * Get business recommendations based on current configuration\r\n * @param {Array} products - Array of selected products\r\n * @param {number} serviceCharge - Service charge amount\r\n * @param {string} billingCycle - Billing cycle (monthly/annual)\r\n * @param {number} profitBeforeTax - Profit before tax\r\n * @returns {Array} Array of recommendations\r\n */\nexport const getRecommendations = (products, serviceCharge, billingCycle, profitBeforeTax) => {\n  if (!Array.isArray(products) || typeof serviceCharge !== 'number' || !['monthly', 'annual'].includes(billingCycle) || typeof profitBeforeTax !== 'number') {\n    throw new Error('Invalid input parameters');\n  }\n  const recommendations = [];\n  const selectedCategories = products.map(p => p.category);\n\n  // 1. Margin improvement\n  const lowMarginProducts = products.filter(p => getPricingData(p, p.qty).margin < 35);\n  if (lowMarginProducts.length > 0) {\n    lowMarginProducts.forEach(p => {\n      recommendations.push(`Increase the margin for \"${p.name}\" (currently ${getPricingData(p, p.qty).margin}%) to at least 35% to improve profitability.`);\n    });\n  }\n\n  // 2. Upsell higher-margin products\n  const highMarginProducts = products.filter(p => getPricingData(p, p.qty).margin >= 40);\n  if (highMarginProducts.length > 0) {\n    highMarginProducts.forEach(p => {\n      recommendations.push(`Focus on upselling \"${p.name}\" (margin ${getPricingData(p, p.qty).margin}%) for better profit.`);\n    });\n  }\n\n  // 3. Bundle services\n  if (products.length > 1) {\n    recommendations.push(\"Bundle multiple products/services for a more attractive offer and higher total revenue.\");\n  }\n\n  // 4. Service charge review\n  if (serviceCharge < 100) {\n    recommendations.push(\"Consider increasing your Professional Services & Support fee to at least $100/year to match industry averages.\");\n  }\n\n  // 5. Profitability check\n  if (profitBeforeTax < 0) {\n    recommendations.push(\"Warning: Your current configuration is not profitable. Review your pricing and costs.\");\n  } else if (profitBeforeTax < 200) {\n    recommendations.push(\"Your profit is low. Consider increasing margins or service fees, or reducing costs.\");\n  } else {\n    recommendations.push(\"Your configuration is profitable. Look for further upsell opportunities or cost optimizations.\");\n  }\n\n  // 6. Complementary product recommendations\n  const complementaryCategories = {\n    Desktop: [\"Server\", \"SaaS\"],\n    Server: [\"SaaS\", \"Virtual Server\"],\n    \"Virtual Server\": [\"SaaS\"],\n    SaaS: [\"Server\", \"Virtual Server\"]\n  };\n  const missingCategories = Object.entries(complementaryCategories).filter(([category]) => selectedCategories.includes(category)).flatMap(([, compCategories]) => compCategories.filter(cat => !selectedCategories.includes(cat))).filter((cat, index, self) => self.indexOf(cat) === index);\n  if (missingCategories.length > 0) {\n    const suggestedProduct = products.find(p => missingCategories.includes(p.category));\n    if (suggestedProduct) {\n      const potentialRevenue = formatCurrency(suggestedProduct.pricingSlabs[0].recommendedPrice * 5);\n      recommendations.push(`Enhance your solution by adding a \"${suggestedProduct.category}\" product like \"${suggestedProduct.name}\". This can provide a more comprehensive backup strategy and increase your revenue by approximately $${potentialRevenue} for 5 units.`);\n    }\n  }\n  return recommendations;\n};","map":{"version":3,"names":["FINANCIAL_CONSTANTS","ANNUAL_DISCOUNT_RATE","INDUSTRY_AVG_SERVICE_FEE","SERVICE_FEE_THRESHOLD_LOW","SERVICE_FEE_THRESHOLD_HIGH","TAX_RATE","DEFAULT_MARGIN","getPricingData","product","qty","pricingSlabs","Error","Number","isInteger","slab","find","minQty","maxQty","length","getPackageName","products","Array","isArray","formatCurrency","amount","Math","round","getRecommendations","serviceCharge","billingCycle","profitBeforeTax","includes","recommendations","selectedCategories","map","p","category","lowMarginProducts","filter","margin","forEach","push","name","highMarginProducts","complementaryCategories","Desktop","Server","SaaS","missingCategories","Object","entries","flatMap","compCategories","cat","index","self","indexOf","suggestedProduct","potentialRevenue","recommendedPrice"],"sources":["C:/Users/Hasan/Desktop/vscode/etcalc/src/utils/pricing.js"],"sourcesContent":["// Constants for financial calculations\r\nexport const FINANCIAL_CONSTANTS = {\r\n  ANNUAL_DISCOUNT_RATE: 0.03,\r\n  INDUSTRY_AVG_SERVICE_FEE: 100,\r\n  SERVICE_FEE_THRESHOLD_LOW: 0.8,\r\n  SERVICE_FEE_THRESHOLD_HIGH: 1.2,\r\n  TAX_RATE: 0.13,\r\n  DEFAULT_MARGIN: 0.35\r\n};\r\n\r\n/**\r\n * Get pricing data for a product based on quantity\r\n * @param {Object} product - Product object\r\n * @param {number} qty - Quantity\r\n * @returns {Object} Pricing slab data\r\n * @throws {Error} If product or quantity is invalid\r\n */\r\nexport const getPricingData = (product, qty) => {\r\n  if (!product || !product.pricingSlabs) {\r\n    throw new Error('Invalid product data');\r\n  }\r\n  \r\n  if (!Number.isInteger(qty) || qty < 1) {\r\n    throw new Error('Quantity must be a positive integer');\r\n  }\r\n\r\n  const slab = product.pricingSlabs.find(\r\n    slab => qty >= slab.minQty && qty <= slab.maxQty\r\n  );\r\n\r\n  return slab || product.pricingSlabs[product.pricingSlabs.length - 1];\r\n};\r\n\r\n/**\r\n * Get package name based on number of products\r\n * @param {Array} products - Array of products\r\n * @returns {string} Package name\r\n */\r\nexport const getPackageName = (products) => {\r\n  if (!Array.isArray(products)) {\r\n    throw new Error('Invalid products array');\r\n  }\r\n  return products.length >= 2 ? \"Backup Total\" : \"Backup Basic\";\r\n};\r\n\r\n/**\r\n * Calculate total cost with proper decimal handling\r\n * @param {number} amount - Amount to format\r\n * @returns {number} Formatted amount with 2 decimal places\r\n */\r\nexport const formatCurrency = (amount) => {\r\n  return Number(Math.round(amount + 'e2') + 'e-2');\r\n};\r\n\r\n/**\r\n * Get business recommendations based on current configuration\r\n * @param {Array} products - Array of selected products\r\n * @param {number} serviceCharge - Service charge amount\r\n * @param {string} billingCycle - Billing cycle (monthly/annual)\r\n * @param {number} profitBeforeTax - Profit before tax\r\n * @returns {Array} Array of recommendations\r\n */\r\nexport const getRecommendations = (products, serviceCharge, billingCycle, profitBeforeTax) => {\r\n  if (!Array.isArray(products) || typeof serviceCharge !== 'number' || \r\n      !['monthly', 'annual'].includes(billingCycle) || typeof profitBeforeTax !== 'number') {\r\n    throw new Error('Invalid input parameters');\r\n  }\r\n\r\n  const recommendations = [];\r\n  const selectedCategories = products.map(p => p.category);\r\n\r\n  // 1. Margin improvement\r\n  const lowMarginProducts = products.filter(p => getPricingData(p, p.qty).margin < 35);\r\n  if (lowMarginProducts.length > 0) {\r\n    lowMarginProducts.forEach(p => {\r\n      recommendations.push(`Increase the margin for \"${p.name}\" (currently ${getPricingData(p, p.qty).margin}%) to at least 35% to improve profitability.`);\r\n    });\r\n  }\r\n\r\n  // 2. Upsell higher-margin products\r\n  const highMarginProducts = products.filter(p => getPricingData(p, p.qty).margin >= 40);\r\n  if (highMarginProducts.length > 0) {\r\n    highMarginProducts.forEach(p => {\r\n      recommendations.push(`Focus on upselling \"${p.name}\" (margin ${getPricingData(p, p.qty).margin}%) for better profit.`);\r\n    });\r\n  }\r\n\r\n  // 3. Bundle services\r\n  if (products.length > 1) {\r\n    recommendations.push(\"Bundle multiple products/services for a more attractive offer and higher total revenue.\");\r\n  }\r\n\r\n  // 4. Service charge review\r\n  if (serviceCharge < 100) {\r\n    recommendations.push(\"Consider increasing your Professional Services & Support fee to at least $100/year to match industry averages.\");\r\n  }\r\n\r\n  // 5. Profitability check\r\n  if (profitBeforeTax < 0) {\r\n    recommendations.push(\"Warning: Your current configuration is not profitable. Review your pricing and costs.\");\r\n  } else if (profitBeforeTax < 200) {\r\n    recommendations.push(\"Your profit is low. Consider increasing margins or service fees, or reducing costs.\");\r\n  } else {\r\n    recommendations.push(\"Your configuration is profitable. Look for further upsell opportunities or cost optimizations.\");\r\n  }\r\n\r\n  // 6. Complementary product recommendations\r\n  const complementaryCategories = {\r\n    Desktop: [\"Server\", \"SaaS\"],\r\n    Server: [\"SaaS\", \"Virtual Server\"],\r\n    \"Virtual Server\": [\"SaaS\"],\r\n    SaaS: [\"Server\", \"Virtual Server\"],\r\n  };\r\n  const missingCategories = Object.entries(complementaryCategories)\r\n    .filter(([category]) => selectedCategories.includes(category))\r\n    .flatMap(([, compCategories]) => \r\n      compCategories.filter(cat => !selectedCategories.includes(cat))\r\n    )\r\n    .filter((cat, index, self) => self.indexOf(cat) === index);\r\n  if (missingCategories.length > 0) {\r\n    const suggestedProduct = products.find(p => missingCategories.includes(p.category));\r\n    if (suggestedProduct) {\r\n      const potentialRevenue = formatCurrency(suggestedProduct.pricingSlabs[0].recommendedPrice * 5);\r\n      recommendations.push(\r\n        `Enhance your solution by adding a \"${suggestedProduct.category}\" product like \"${suggestedProduct.name}\". This can provide a more comprehensive backup strategy and increase your revenue by approximately $${potentialRevenue} for 5 units.`\r\n      );\r\n    }\r\n  }\r\n\r\n  return recommendations;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}