{"ast":null,"code":"import emailjs from '@emailjs/browser';\nimport { getLoyaltyTier, getUpsellOpportunities, getProfitOptimizationRecommendations, generateFeeReport, calculateFeeSavings, getRecommendations, calculateTotalCost, formatCurrency, FINANCIAL_CONSTANTS } from './pricing';\n\n// Initialize EmailJS with your public key\nemailjs.init(process.env.REACT_APP_EMAILJS_PUBLIC_KEY);\n\n/**\r\n * Send an email using EmailJS\r\n * @param {Object} data - The email data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.subject - Email subject\r\n * @param {string} data.message - Email message content\r\n * @param {boolean} data.isHtml - Whether the message is HTML formatted\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\nexport const sendEmail = async data => {\n  try {\n    const templateParams = {\n      to_email: data.to_email,\n      subject: data.subject,\n      message: data.message,\n      is_html: data.isHtml || false\n    };\n    const response = await emailjs.send(process.env.REACT_APP_EMAILJS_SERVICE_ID, process.env.REACT_APP_EMAILJS_TEMPLATE_ID, templateParams);\n    return response;\n  } catch (error) {\n    console.error('Error sending email:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Send personalized pricing recommendations email\r\n * @param {Object} data - Customer and pricing data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.customerName - Customer's name\r\n * @param {Array} data.products - Current products\r\n * @param {number} data.totalSpend - Total customer spend\r\n * @param {number} data.monthlyVolume - Monthly transaction volume\r\n * @param {string} data.commitmentLevel - Current commitment level\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\nexport const sendPricingRecommendations = async data => {\n  try {\n    const loyaltyTier = getLoyaltyTier(data.totalSpend);\n    const upsellOpportunities = getUpsellOpportunities(data.products, data.commitmentLevel, data.totalSpend);\n    const profitRecommendations = getProfitOptimizationRecommendations(data.products, data.commitmentLevel, data.totalSpend);\n    const feeReport = generateFeeReport({\n      amount: data.totalSpend\n    }, data.monthlyVolume, data.totalSpend);\n    const feeSavings = calculateFeeSavings({\n      amount: data.totalSpend\n    }, data.monthlyVolume, data.totalSpend);\n    const recommendations = getRecommendations(data.products, feeReport.serviceFee, data.commitmentLevel, feeReport.profitBeforeTax, data.totalSpend, data.monthlyVolume);\n    const message = `\n      Dear ${data.customerName},\n\n      We've analyzed your account and have some personalized recommendations to help you optimize your costs and maximize benefits:\n\n      Current Status:\n      - Loyalty Tier: ${loyaltyTier.name}\n      - Total Spend: $${data.totalSpend.toFixed(2)}\n      - Monthly Volume: $${data.monthlyVolume.toFixed(2)}\n\n      Fee Analysis:\n      ${feeReport.summary}\n\n      Potential Savings:\n      ${feeSavings.summary}\n\n      Recommended Actions:\n      ${recommendations.map(rec => `- ${rec}`).join('\\n')}\n\n      Upsell Opportunities:\n      ${upsellOpportunities.map(opp => `- ${opp.name}: ${opp.description}`).join('\\n')}\n\n      Profit Optimization:\n      ${profitRecommendations.map(rec => `- ${rec}`).join('\\n')}\n\n      Would you like to discuss any of these recommendations in detail? Our team is ready to help you implement these optimizations.\n\n      Best regards,\n      Your Pricing Optimization Team\n    `;\n    return await sendEmail({\n      to_email: data.to_email,\n      subject: `Personalized Pricing Recommendations for ${data.customerName}`,\n      message\n    });\n  } catch (error) {\n    console.error('Error sending pricing recommendations:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Send commitment optimization email\r\n * @param {Object} data - Customer and commitment data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.customerName - Customer's name\r\n * @param {string} data.currentCommitment - Current commitment level\r\n * @param {string} data.recommendedCommitment - Recommended commitment level\r\n * @param {Object} data.savings - Potential savings details\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\nexport const sendCommitmentOptimization = async data => {\n  try {\n    const message = `\n      Dear ${data.customerName},\n\n      We've identified an opportunity to optimize your commitment level and increase your savings:\n\n      Current Commitment: ${data.currentCommitment}\n      Recommended Commitment: ${data.recommendedCommitment}\n\n      Potential Benefits:\n      - Annual Savings: $${data.savings.annual.toFixed(2)}\n      - Processing Fee Savings: $${data.savings.processingFees.toFixed(2)}\n      - Service Fee Savings: $${data.savings.serviceFees.toFixed(2)}\n      - Additional Benefits: ${data.savings.additionalBenefits.join(', ')}\n\n      Would you like to discuss upgrading your commitment level? Our team is available to help you make this transition smoothly.\n\n      Best regards,\n      Your Commitment Optimization Team\n    `;\n    return await sendEmail({\n      to_email: data.to_email,\n      subject: `Commitment Optimization Opportunity for ${data.customerName}`,\n      message\n    });\n  } catch (error) {\n    console.error('Error sending commitment optimization:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Send ExcelyTech quotation email\r\n * @param {Object} data - Quotation data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.customerName - Customer's name\r\n * @param {string} data.companyName - Company name\r\n * @param {Array} data.products - Array of products with quantities\r\n * @param {string} data.commitmentLevel - Commitment level (MONTHLY, QUARTERLY, etc.)\r\n * @param {boolean} data.isAnnual - Whether the quotation is for annual billing\r\n * @param {number} data.monthlyVolume - Monthly transaction volume\r\n * @param {number} data.totalSpend - Total customer spend\r\n * @param {Object} data.terms - Additional terms and conditions\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\nexport const sendExcelyTechQuotation = async data => {\n  try {\n    const quotationDate = new Date().toLocaleDateString();\n    const validUntil = new Date();\n    validUntil.setDate(validUntil.getDate() + 30); // Valid for 30 days\n    const quotationRef = `ETQ-${Date.now().toString().slice(-6)}`;\n    const totalCost = calculateTotalCost(data.products, data.products.reduce((sum, p) => sum + p.quantity, 0), data.isAnnual, false, data.monthlyVolume, data.totalSpend);\n    const loyaltyTier = getLoyaltyTier(data.totalSpend);\n    const feeReport = generateFeeReport({\n      amount: totalCost.total\n    }, data.monthlyVolume, data.totalSpend);\n    const upsellOpportunities = getUpsellOpportunities(data.products, data.commitmentLevel, data.totalSpend);\n    const message = `\n<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        .header {\n            text-align: center;\n            margin-bottom: 30px;\n        }\n        .logo {\n            max-width: 200px;\n            height: auto;\n        }\n        .section {\n            margin: 20px 0;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n        }\n        .section-title {\n            background-color: #f5f5f5;\n            padding: 10px;\n            margin: -15px -15px 15px -15px;\n            border-radius: 5px 5px 0 0;\n            font-weight: bold;\n            color: #2c3e50;\n        }\n        .cost-breakdown {\n            width: 100%;\n            border-collapse: collapse;\n            margin: 15px 0;\n        }\n        .cost-breakdown td {\n            padding: 8px;\n            border-bottom: 1px solid #ddd;\n        }\n        .cost-breakdown .total {\n            font-weight: bold;\n            border-top: 2px solid #333;\n        }\n        .footer {\n            margin-top: 30px;\n            padding-top: 20px;\n            border-top: 1px solid #ddd;\n            font-size: 0.9em;\n            color: #666;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <img src=\"https://excelytech.com/logo.png\" alt=\"ExcelyTech Logo\" class=\"logo\">\n        <h1>OFFICIAL QUOTATION</h1>\n    </div>\n\n    <p>Dear ${data.customerName},</p>\n\n    <p>Thank you for choosing ExcelyTech. We are pleased to present our comprehensive solution for ${data.companyName}.</p>\n\n    <div class=\"section\">\n        <div class=\"section-title\">QUOTATION DETAILS</div>\n        <p>Quotation Date: ${quotationDate}<br>\n        Valid Until: ${validUntil.toLocaleDateString()}<br>\n        Quotation Reference: ${quotationRef}<br>\n        Commitment Level: ${data.commitmentLevel}<br>\n        Billing Cycle: ${data.isAnnual ? 'Annual' : 'Monthly'}</p>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">CUSTOMER INFORMATION</div>\n        <p>Company: ${data.companyName}<br>\n        Loyalty Tier: ${loyaltyTier.name}<br>\n        Monthly Volume: ${formatCurrency(data.monthlyVolume)}<br>\n        Total Spend: ${formatCurrency(data.totalSpend)}</p>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">PRODUCTS & SERVICES</div>\n        ${data.products.map(p => `\n        <div style=\"margin-bottom: 15px;\">\n            <strong>${p.name}</strong><br>\n            - Quantity: ${p.quantity}<br>\n            - Unit Price: ${formatCurrency(p.unitPrice)}<br>\n            - Subtotal: ${formatCurrency(p.unitPrice * p.quantity)}<br>\n            - Features: ${p.features ? p.features.join(', ') : 'Standard features included'}\n        </div>\n        `).join('')}\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">COST BREAKDOWN</div>\n        <table class=\"cost-breakdown\">\n            <tr>\n                <td>Subtotal:</td>\n                <td style=\"text-align: right;\">${formatCurrency(totalCost.subtotal)}</td>\n            </tr>\n            <tr>\n                <td>Processing Fees:</td>\n                <td style=\"text-align: right;\">${formatCurrency(totalCost.processingFees)}</td>\n            </tr>\n            <tr>\n                <td>Service Fees:</td>\n                <td style=\"text-align: right;\">${formatCurrency(feeReport.serviceFee)}</td>\n            </tr>\n            <tr>\n                <td>Volume Discount:</td>\n                <td style=\"text-align: right;\">${formatCurrency(totalCost.volumeDiscount)}</td>\n            </tr>\n            <tr>\n                <td>Commitment Discount:</td>\n                <td style=\"text-align: right;\">${formatCurrency(totalCost.commitmentDiscount)}</td>\n            </tr>\n            <tr>\n                <td>Tax (${(FINANCIAL_CONSTANTS.TAX_RATE * 100).toFixed(1)}%):</td>\n                <td style=\"text-align: right;\">${formatCurrency(totalCost.tax)}</td>\n            </tr>\n            <tr class=\"total\">\n                <td>Total Amount:</td>\n                <td style=\"text-align: right;\">${formatCurrency(totalCost.total)}</td>\n            </tr>\n        </table>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">TERMS & CONDITIONS</div>\n        ${data.terms ? Object.entries(data.terms).map(([key, value]) => `<p>- ${key}: ${value}</p>`).join('') : `\n        <p>- Payment Terms: Net 30<br>\n        - Service Level Agreement: 99.9% Uptime<br>\n        - Support: 24/7 Technical Support<br>\n        - Implementation: Included<br>\n        - Training: Basic training included<br>\n        - Data Retention: 90 days<br>\n        - Backup Frequency: Daily<br>\n        - Security: Enterprise-grade encryption</p>\n        `}\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">ADDITIONAL BENEFITS</div>\n        <p>- Free setup and configuration<br>\n        - Regular system updates<br>\n        - Security patches<br>\n        - Performance monitoring<br>\n        - Backup services<br>\n        - Technical documentation<br>\n        - API access<br>\n        - Custom integration support<br>\n        - Priority support queue<br>\n        - Monthly performance reports</p>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">RECOMMENDED ADD-ONS</div>\n        ${upsellOpportunities.map(opp => `\n        <div style=\"margin-bottom: 15px;\">\n            <strong>${opp.name}</strong><br>\n            - Price: ${formatCurrency(opp.price)}<br>\n            - Description: ${opp.description}<br>\n            - Benefits: ${opp.benefits.join(', ')}\n        </div>\n        `).join('')}\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">NEXT STEPS</div>\n        <p>1. Review the quotation<br>\n        2. Sign and return the acceptance form<br>\n        3. Our team will contact you to schedule implementation<br>\n        4. Begin your ExcelyTech journey!</p>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">CONTACT INFORMATION</div>\n        <p>ExcelyTech Sales Team<br>\n        Email: sales@excelytech.com<br>\n        Phone: +1 (555) 123-4567<br>\n        Website: www.excelytech.com<br>\n        Address: 123 Tech Street, Silicon Valley, CA 94025</p>\n    </div>\n\n    <div class=\"footer\">\n        <div class=\"section-title\">IMPORTANT NOTES</div>\n        <p>- This quotation is valid for 30 days from the date of issue<br>\n        - Prices are subject to change after the validity period<br>\n        - All amounts are in USD unless otherwise specified<br>\n        - Implementation timeline will be confirmed upon acceptance<br>\n        - Custom requirements may affect final pricing</p>\n    </div>\n\n    <p>For any questions or clarifications, please don't hesitate to contact us.</p>\n\n    <p>Best regards,<br>\n    ExcelyTech Sales Team</p>\n</body>\n</html>\n    `;\n    return await sendEmail({\n      to_email: data.to_email,\n      subject: `ExcelyTech Quotation - ${data.companyName} - ${quotationRef}`,\n      message,\n      isHtml: true\n    });\n  } catch (error) {\n    console.error('Error sending ExcelyTech quotation:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["emailjs","getLoyaltyTier","getUpsellOpportunities","getProfitOptimizationRecommendations","generateFeeReport","calculateFeeSavings","getRecommendations","calculateTotalCost","formatCurrency","FINANCIAL_CONSTANTS","init","process","env","REACT_APP_EMAILJS_PUBLIC_KEY","sendEmail","data","templateParams","to_email","subject","message","is_html","isHtml","response","send","REACT_APP_EMAILJS_SERVICE_ID","REACT_APP_EMAILJS_TEMPLATE_ID","error","console","sendPricingRecommendations","loyaltyTier","totalSpend","upsellOpportunities","products","commitmentLevel","profitRecommendations","feeReport","amount","monthlyVolume","feeSavings","recommendations","serviceFee","profitBeforeTax","customerName","name","toFixed","summary","map","rec","join","opp","description","sendCommitmentOptimization","currentCommitment","recommendedCommitment","savings","annual","processingFees","serviceFees","additionalBenefits","sendExcelyTechQuotation","quotationDate","Date","toLocaleDateString","validUntil","setDate","getDate","quotationRef","now","toString","slice","totalCost","reduce","sum","p","quantity","isAnnual","total","companyName","unitPrice","features","subtotal","volumeDiscount","commitmentDiscount","TAX_RATE","tax","terms","Object","entries","key","value","price","benefits"],"sources":["C:/Users/Hasan/Desktop/vscode/etcalc/src/utils/emailService.js"],"sourcesContent":["import emailjs from '@emailjs/browser';\r\nimport { \r\n  getLoyaltyTier, \r\n  getUpsellOpportunities, \r\n  getProfitOptimizationRecommendations,\r\n  generateFeeReport,\r\n  calculateFeeSavings,\r\n  getRecommendations,\r\n  calculateTotalCost,\r\n  formatCurrency,\r\n  FINANCIAL_CONSTANTS\r\n} from './pricing';\r\n\r\n// Initialize EmailJS with your public key\r\nemailjs.init(process.env.REACT_APP_EMAILJS_PUBLIC_KEY);\r\n\r\n/**\r\n * Send an email using EmailJS\r\n * @param {Object} data - The email data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.subject - Email subject\r\n * @param {string} data.message - Email message content\r\n * @param {boolean} data.isHtml - Whether the message is HTML formatted\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\r\nexport const sendEmail = async (data) => {\r\n  try {\r\n    const templateParams = {\r\n      to_email: data.to_email,\r\n      subject: data.subject,\r\n      message: data.message,\r\n      is_html: data.isHtml || false\r\n    };\r\n\r\n    const response = await emailjs.send(\r\n      process.env.REACT_APP_EMAILJS_SERVICE_ID,\r\n      process.env.REACT_APP_EMAILJS_TEMPLATE_ID,\r\n      templateParams\r\n    );\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error sending email:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Send personalized pricing recommendations email\r\n * @param {Object} data - Customer and pricing data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.customerName - Customer's name\r\n * @param {Array} data.products - Current products\r\n * @param {number} data.totalSpend - Total customer spend\r\n * @param {number} data.monthlyVolume - Monthly transaction volume\r\n * @param {string} data.commitmentLevel - Current commitment level\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\r\nexport const sendPricingRecommendations = async (data) => {\r\n  try {\r\n    const loyaltyTier = getLoyaltyTier(data.totalSpend);\r\n    const upsellOpportunities = getUpsellOpportunities(\r\n      data.products,\r\n      data.commitmentLevel,\r\n      data.totalSpend\r\n    );\r\n    const profitRecommendations = getProfitOptimizationRecommendations(\r\n      data.products,\r\n      data.commitmentLevel,\r\n      data.totalSpend\r\n    );\r\n    const feeReport = generateFeeReport(\r\n      { amount: data.totalSpend },\r\n      data.monthlyVolume,\r\n      data.totalSpend\r\n    );\r\n    const feeSavings = calculateFeeSavings(\r\n      { amount: data.totalSpend },\r\n      data.monthlyVolume,\r\n      data.totalSpend\r\n    );\r\n    const recommendations = getRecommendations(\r\n      data.products,\r\n      feeReport.serviceFee,\r\n      data.commitmentLevel,\r\n      feeReport.profitBeforeTax,\r\n      data.totalSpend,\r\n      data.monthlyVolume\r\n    );\r\n\r\n    const message = `\r\n      Dear ${data.customerName},\r\n\r\n      We've analyzed your account and have some personalized recommendations to help you optimize your costs and maximize benefits:\r\n\r\n      Current Status:\r\n      - Loyalty Tier: ${loyaltyTier.name}\r\n      - Total Spend: $${data.totalSpend.toFixed(2)}\r\n      - Monthly Volume: $${data.monthlyVolume.toFixed(2)}\r\n\r\n      Fee Analysis:\r\n      ${feeReport.summary}\r\n\r\n      Potential Savings:\r\n      ${feeSavings.summary}\r\n\r\n      Recommended Actions:\r\n      ${recommendations.map(rec => `- ${rec}`).join('\\n')}\r\n\r\n      Upsell Opportunities:\r\n      ${upsellOpportunities.map(opp => `- ${opp.name}: ${opp.description}`).join('\\n')}\r\n\r\n      Profit Optimization:\r\n      ${profitRecommendations.map(rec => `- ${rec}`).join('\\n')}\r\n\r\n      Would you like to discuss any of these recommendations in detail? Our team is ready to help you implement these optimizations.\r\n\r\n      Best regards,\r\n      Your Pricing Optimization Team\r\n    `;\r\n\r\n    return await sendEmail({\r\n      to_email: data.to_email,\r\n      subject: `Personalized Pricing Recommendations for ${data.customerName}`,\r\n      message\r\n    });\r\n  } catch (error) {\r\n    console.error('Error sending pricing recommendations:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Send commitment optimization email\r\n * @param {Object} data - Customer and commitment data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.customerName - Customer's name\r\n * @param {string} data.currentCommitment - Current commitment level\r\n * @param {string} data.recommendedCommitment - Recommended commitment level\r\n * @param {Object} data.savings - Potential savings details\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\r\nexport const sendCommitmentOptimization = async (data) => {\r\n  try {\r\n    const message = `\r\n      Dear ${data.customerName},\r\n\r\n      We've identified an opportunity to optimize your commitment level and increase your savings:\r\n\r\n      Current Commitment: ${data.currentCommitment}\r\n      Recommended Commitment: ${data.recommendedCommitment}\r\n\r\n      Potential Benefits:\r\n      - Annual Savings: $${data.savings.annual.toFixed(2)}\r\n      - Processing Fee Savings: $${data.savings.processingFees.toFixed(2)}\r\n      - Service Fee Savings: $${data.savings.serviceFees.toFixed(2)}\r\n      - Additional Benefits: ${data.savings.additionalBenefits.join(', ')}\r\n\r\n      Would you like to discuss upgrading your commitment level? Our team is available to help you make this transition smoothly.\r\n\r\n      Best regards,\r\n      Your Commitment Optimization Team\r\n    `;\r\n\r\n    return await sendEmail({\r\n      to_email: data.to_email,\r\n      subject: `Commitment Optimization Opportunity for ${data.customerName}`,\r\n      message\r\n    });\r\n  } catch (error) {\r\n    console.error('Error sending commitment optimization:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Send ExcelyTech quotation email\r\n * @param {Object} data - Quotation data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.customerName - Customer's name\r\n * @param {string} data.companyName - Company name\r\n * @param {Array} data.products - Array of products with quantities\r\n * @param {string} data.commitmentLevel - Commitment level (MONTHLY, QUARTERLY, etc.)\r\n * @param {boolean} data.isAnnual - Whether the quotation is for annual billing\r\n * @param {number} data.monthlyVolume - Monthly transaction volume\r\n * @param {number} data.totalSpend - Total customer spend\r\n * @param {Object} data.terms - Additional terms and conditions\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\r\nexport const sendExcelyTechQuotation = async (data) => {\r\n  try {\r\n    const quotationDate = new Date().toLocaleDateString();\r\n    const validUntil = new Date();\r\n    validUntil.setDate(validUntil.getDate() + 30); // Valid for 30 days\r\n    const quotationRef = `ETQ-${Date.now().toString().slice(-6)}`;\r\n\r\n    const totalCost = calculateTotalCost(\r\n      data.products,\r\n      data.products.reduce((sum, p) => sum + p.quantity, 0),\r\n      data.isAnnual,\r\n      false,\r\n      data.monthlyVolume,\r\n      data.totalSpend\r\n    );\r\n\r\n    const loyaltyTier = getLoyaltyTier(data.totalSpend);\r\n    const feeReport = generateFeeReport(\r\n      { amount: totalCost.total },\r\n      data.monthlyVolume,\r\n      data.totalSpend\r\n    );\r\n\r\n    const upsellOpportunities = getUpsellOpportunities(\r\n      data.products,\r\n      data.commitmentLevel,\r\n      data.totalSpend\r\n    );\r\n\r\n    const message = `\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <style>\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            line-height: 1.6;\r\n            color: #333;\r\n            max-width: 800px;\r\n            margin: 0 auto;\r\n            padding: 20px;\r\n        }\r\n        .header {\r\n            text-align: center;\r\n            margin-bottom: 30px;\r\n        }\r\n        .logo {\r\n            max-width: 200px;\r\n            height: auto;\r\n        }\r\n        .section {\r\n            margin: 20px 0;\r\n            padding: 15px;\r\n            border: 1px solid #ddd;\r\n            border-radius: 5px;\r\n        }\r\n        .section-title {\r\n            background-color: #f5f5f5;\r\n            padding: 10px;\r\n            margin: -15px -15px 15px -15px;\r\n            border-radius: 5px 5px 0 0;\r\n            font-weight: bold;\r\n            color: #2c3e50;\r\n        }\r\n        .cost-breakdown {\r\n            width: 100%;\r\n            border-collapse: collapse;\r\n            margin: 15px 0;\r\n        }\r\n        .cost-breakdown td {\r\n            padding: 8px;\r\n            border-bottom: 1px solid #ddd;\r\n        }\r\n        .cost-breakdown .total {\r\n            font-weight: bold;\r\n            border-top: 2px solid #333;\r\n        }\r\n        .footer {\r\n            margin-top: 30px;\r\n            padding-top: 20px;\r\n            border-top: 1px solid #ddd;\r\n            font-size: 0.9em;\r\n            color: #666;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"header\">\r\n        <img src=\"https://excelytech.com/logo.png\" alt=\"ExcelyTech Logo\" class=\"logo\">\r\n        <h1>OFFICIAL QUOTATION</h1>\r\n    </div>\r\n\r\n    <p>Dear ${data.customerName},</p>\r\n\r\n    <p>Thank you for choosing ExcelyTech. We are pleased to present our comprehensive solution for ${data.companyName}.</p>\r\n\r\n    <div class=\"section\">\r\n        <div class=\"section-title\">QUOTATION DETAILS</div>\r\n        <p>Quotation Date: ${quotationDate}<br>\r\n        Valid Until: ${validUntil.toLocaleDateString()}<br>\r\n        Quotation Reference: ${quotationRef}<br>\r\n        Commitment Level: ${data.commitmentLevel}<br>\r\n        Billing Cycle: ${data.isAnnual ? 'Annual' : 'Monthly'}</p>\r\n    </div>\r\n\r\n    <div class=\"section\">\r\n        <div class=\"section-title\">CUSTOMER INFORMATION</div>\r\n        <p>Company: ${data.companyName}<br>\r\n        Loyalty Tier: ${loyaltyTier.name}<br>\r\n        Monthly Volume: ${formatCurrency(data.monthlyVolume)}<br>\r\n        Total Spend: ${formatCurrency(data.totalSpend)}</p>\r\n    </div>\r\n\r\n    <div class=\"section\">\r\n        <div class=\"section-title\">PRODUCTS & SERVICES</div>\r\n        ${data.products.map(p => `\r\n        <div style=\"margin-bottom: 15px;\">\r\n            <strong>${p.name}</strong><br>\r\n            - Quantity: ${p.quantity}<br>\r\n            - Unit Price: ${formatCurrency(p.unitPrice)}<br>\r\n            - Subtotal: ${formatCurrency(p.unitPrice * p.quantity)}<br>\r\n            - Features: ${p.features ? p.features.join(', ') : 'Standard features included'}\r\n        </div>\r\n        `).join('')}\r\n    </div>\r\n\r\n    <div class=\"section\">\r\n        <div class=\"section-title\">COST BREAKDOWN</div>\r\n        <table class=\"cost-breakdown\">\r\n            <tr>\r\n                <td>Subtotal:</td>\r\n                <td style=\"text-align: right;\">${formatCurrency(totalCost.subtotal)}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Processing Fees:</td>\r\n                <td style=\"text-align: right;\">${formatCurrency(totalCost.processingFees)}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Service Fees:</td>\r\n                <td style=\"text-align: right;\">${formatCurrency(feeReport.serviceFee)}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Volume Discount:</td>\r\n                <td style=\"text-align: right;\">${formatCurrency(totalCost.volumeDiscount)}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Commitment Discount:</td>\r\n                <td style=\"text-align: right;\">${formatCurrency(totalCost.commitmentDiscount)}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Tax (${(FINANCIAL_CONSTANTS.TAX_RATE * 100).toFixed(1)}%):</td>\r\n                <td style=\"text-align: right;\">${formatCurrency(totalCost.tax)}</td>\r\n            </tr>\r\n            <tr class=\"total\">\r\n                <td>Total Amount:</td>\r\n                <td style=\"text-align: right;\">${formatCurrency(totalCost.total)}</td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n\r\n    <div class=\"section\">\r\n        <div class=\"section-title\">TERMS & CONDITIONS</div>\r\n        ${data.terms ? Object.entries(data.terms).map(([key, value]) => `<p>- ${key}: ${value}</p>`).join('') : `\r\n        <p>- Payment Terms: Net 30<br>\r\n        - Service Level Agreement: 99.9% Uptime<br>\r\n        - Support: 24/7 Technical Support<br>\r\n        - Implementation: Included<br>\r\n        - Training: Basic training included<br>\r\n        - Data Retention: 90 days<br>\r\n        - Backup Frequency: Daily<br>\r\n        - Security: Enterprise-grade encryption</p>\r\n        `}\r\n    </div>\r\n\r\n    <div class=\"section\">\r\n        <div class=\"section-title\">ADDITIONAL BENEFITS</div>\r\n        <p>- Free setup and configuration<br>\r\n        - Regular system updates<br>\r\n        - Security patches<br>\r\n        - Performance monitoring<br>\r\n        - Backup services<br>\r\n        - Technical documentation<br>\r\n        - API access<br>\r\n        - Custom integration support<br>\r\n        - Priority support queue<br>\r\n        - Monthly performance reports</p>\r\n    </div>\r\n\r\n    <div class=\"section\">\r\n        <div class=\"section-title\">RECOMMENDED ADD-ONS</div>\r\n        ${upsellOpportunities.map(opp => `\r\n        <div style=\"margin-bottom: 15px;\">\r\n            <strong>${opp.name}</strong><br>\r\n            - Price: ${formatCurrency(opp.price)}<br>\r\n            - Description: ${opp.description}<br>\r\n            - Benefits: ${opp.benefits.join(', ')}\r\n        </div>\r\n        `).join('')}\r\n    </div>\r\n\r\n    <div class=\"section\">\r\n        <div class=\"section-title\">NEXT STEPS</div>\r\n        <p>1. Review the quotation<br>\r\n        2. Sign and return the acceptance form<br>\r\n        3. Our team will contact you to schedule implementation<br>\r\n        4. Begin your ExcelyTech journey!</p>\r\n    </div>\r\n\r\n    <div class=\"section\">\r\n        <div class=\"section-title\">CONTACT INFORMATION</div>\r\n        <p>ExcelyTech Sales Team<br>\r\n        Email: sales@excelytech.com<br>\r\n        Phone: +1 (555) 123-4567<br>\r\n        Website: www.excelytech.com<br>\r\n        Address: 123 Tech Street, Silicon Valley, CA 94025</p>\r\n    </div>\r\n\r\n    <div class=\"footer\">\r\n        <div class=\"section-title\">IMPORTANT NOTES</div>\r\n        <p>- This quotation is valid for 30 days from the date of issue<br>\r\n        - Prices are subject to change after the validity period<br>\r\n        - All amounts are in USD unless otherwise specified<br>\r\n        - Implementation timeline will be confirmed upon acceptance<br>\r\n        - Custom requirements may affect final pricing</p>\r\n    </div>\r\n\r\n    <p>For any questions or clarifications, please don't hesitate to contact us.</p>\r\n\r\n    <p>Best regards,<br>\r\n    ExcelyTech Sales Team</p>\r\n</body>\r\n</html>\r\n    `;\r\n\r\n    return await sendEmail({\r\n      to_email: data.to_email,\r\n      subject: `ExcelyTech Quotation - ${data.companyName} - ${quotationRef}`,\r\n      message,\r\n      isHtml: true\r\n    });\r\n  } catch (error) {\r\n    console.error('Error sending ExcelyTech quotation:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}