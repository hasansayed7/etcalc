{"ast":null,"code":"import emailjs from '@emailjs/browser';\nimport { getLoyaltyTier, getUpsellOpportunities, getProfitOptimizationRecommendations, generateFeeReport, calculateFeeSavings, getRecommendations, calculateTotalCost, formatCurrency } from './pricing';\n\n// Initialize EmailJS with your public key\nemailjs.init(process.env.REACT_APP_EMAILJS_PUBLIC_KEY);\n\n/**\r\n * Send an email using EmailJS\r\n * @param {Object} data - The email data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.subject - Email subject\r\n * @param {string} data.message - Email message content\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\nexport const sendEmail = async data => {\n  try {\n    const templateParams = {\n      to_email: data.to_email,\n      subject: data.subject,\n      message: data.message\n    };\n    const response = await emailjs.send(process.env.REACT_APP_EMAILJS_SERVICE_ID, process.env.REACT_APP_EMAILJS_TEMPLATE_ID, templateParams);\n    return response;\n  } catch (error) {\n    console.error('Error sending email:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Send personalized pricing recommendations email\r\n * @param {Object} data - Customer and pricing data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.customerName - Customer's name\r\n * @param {Array} data.products - Current products\r\n * @param {number} data.totalSpend - Total customer spend\r\n * @param {number} data.monthlyVolume - Monthly transaction volume\r\n * @param {string} data.commitmentLevel - Current commitment level\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\nexport const sendPricingRecommendations = async data => {\n  try {\n    const loyaltyTier = getLoyaltyTier(data.totalSpend);\n    const upsellOpportunities = getUpsellOpportunities(data.products, data.commitmentLevel, data.totalSpend);\n    const profitRecommendations = getProfitOptimizationRecommendations(data.products, data.commitmentLevel, data.totalSpend);\n    const feeReport = generateFeeReport({\n      amount: data.totalSpend\n    }, data.monthlyVolume, data.totalSpend);\n    const feeSavings = calculateFeeSavings({\n      amount: data.totalSpend\n    }, data.monthlyVolume, data.totalSpend);\n    const recommendations = getRecommendations(data.products, feeReport.serviceFee, data.commitmentLevel, feeReport.profitBeforeTax, data.totalSpend, data.monthlyVolume);\n    const message = `\n      Dear ${data.customerName},\n\n      We've analyzed your account and have some personalized recommendations to help you optimize your costs and maximize benefits:\n\n      Current Status:\n      - Loyalty Tier: ${loyaltyTier.name}\n      - Total Spend: $${data.totalSpend.toFixed(2)}\n      - Monthly Volume: $${data.monthlyVolume.toFixed(2)}\n\n      Fee Analysis:\n      ${feeReport.summary}\n\n      Potential Savings:\n      ${feeSavings.summary}\n\n      Recommended Actions:\n      ${recommendations.map(rec => `- ${rec}`).join('\\n')}\n\n      Upsell Opportunities:\n      ${upsellOpportunities.map(opp => `- ${opp.name}: ${opp.description}`).join('\\n')}\n\n      Profit Optimization:\n      ${profitRecommendations.map(rec => `- ${rec}`).join('\\n')}\n\n      Would you like to discuss any of these recommendations in detail? Our team is ready to help you implement these optimizations.\n\n      Best regards,\n      Your Pricing Optimization Team\n    `;\n    return await sendEmail({\n      to_email: data.to_email,\n      subject: `Personalized Pricing Recommendations for ${data.customerName}`,\n      message\n    });\n  } catch (error) {\n    console.error('Error sending pricing recommendations:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Send commitment optimization email\r\n * @param {Object} data - Customer and commitment data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.customerName - Customer's name\r\n * @param {string} data.currentCommitment - Current commitment level\r\n * @param {string} data.recommendedCommitment - Recommended commitment level\r\n * @param {Object} data.savings - Potential savings details\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\nexport const sendCommitmentOptimization = async data => {\n  try {\n    const message = `\n      Dear ${data.customerName},\n\n      We've identified an opportunity to optimize your commitment level and increase your savings:\n\n      Current Commitment: ${data.currentCommitment}\n      Recommended Commitment: ${data.recommendedCommitment}\n\n      Potential Benefits:\n      - Annual Savings: $${data.savings.annual.toFixed(2)}\n      - Processing Fee Savings: $${data.savings.processingFees.toFixed(2)}\n      - Service Fee Savings: $${data.savings.serviceFees.toFixed(2)}\n      - Additional Benefits: ${data.savings.additionalBenefits.join(', ')}\n\n      Would you like to discuss upgrading your commitment level? Our team is available to help you make this transition smoothly.\n\n      Best regards,\n      Your Commitment Optimization Team\n    `;\n    return await sendEmail({\n      to_email: data.to_email,\n      subject: `Commitment Optimization Opportunity for ${data.customerName}`,\n      message\n    });\n  } catch (error) {\n    console.error('Error sending commitment optimization:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Send ExcelyTech quotation email\r\n * @param {Object} data - Quotation data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.customerName - Customer's name\r\n * @param {string} data.companyName - Company name\r\n * @param {Array} data.products - Array of products with quantities\r\n * @param {string} data.commitmentLevel - Commitment level (MONTHLY, QUARTERLY, etc.)\r\n * @param {boolean} data.isAnnual - Whether the quotation is for annual billing\r\n * @param {number} data.monthlyVolume - Monthly transaction volume\r\n * @param {number} data.totalSpend - Total customer spend\r\n * @param {Object} data.terms - Additional terms and conditions\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\nexport const sendExcelyTechQuotation = async data => {\n  try {\n    const quotationDate = new Date().toLocaleDateString();\n    const validUntil = new Date();\n    validUntil.setDate(validUntil.getDate() + 30); // Valid for 30 days\n\n    const totalCost = calculateTotalCost(data.products, data.products.reduce((sum, p) => sum + p.quantity, 0), data.isAnnual, false, data.monthlyVolume, data.totalSpend);\n    const loyaltyTier = getLoyaltyTier(data.totalSpend);\n    const feeReport = generateFeeReport({\n      amount: totalCost.total\n    }, data.monthlyVolume, data.totalSpend);\n    const message = `\n      Dear ${data.customerName},\n\n      Thank you for your interest in ExcelyTech's services. Please find below your detailed quotation:\n\n      Quotation Details:\n      - Date: ${quotationDate}\n      - Valid Until: ${validUntil.toLocaleDateString()}\n      - Quotation Reference: ETQ-${Date.now().toString().slice(-6)}\n      - Commitment Level: ${data.commitmentLevel}\n      - Billing Cycle: ${data.isAnnual ? 'Annual' : 'Monthly'}\n\n      Customer Information:\n      - Company: ${data.companyName}\n      - Loyalty Tier: ${loyaltyTier.name}\n\n      Products & Services:\n      ${data.products.map(p => `\n        ${p.name}\n        - Quantity: ${p.quantity}\n        - Unit Price: ${formatCurrency(p.unitPrice)}\n        - Subtotal: ${formatCurrency(p.unitPrice * p.quantity)}\n      `).join('\\n')}\n\n      Cost Breakdown:\n      - Subtotal: ${formatCurrency(totalCost.subtotal)}\n      - Processing Fees: ${formatCurrency(totalCost.processingFees)}\n      - Service Fees: ${formatCurrency(feeReport.serviceFee)}\n      - Volume Discount: ${formatCurrency(totalCost.volumeDiscount)}\n      - Commitment Discount: ${formatCurrency(totalCost.commitmentDiscount)}\n      - Tax (${(FINANCIAL_CONSTANTS.TAX_RATE * 100).toFixed(1)}%): ${formatCurrency(totalCost.tax)}\n      - Total Amount: ${formatCurrency(totalCost.total)}\n\n      Terms & Conditions:\n      ${data.terms ? Object.entries(data.terms).map(([key, value]) => `- ${key}: ${value}`).join('\\n') : `\n      - Payment Terms: Net 30\n      - Service Level Agreement: 99.9% Uptime\n      - Support: 24/7 Technical Support\n      - Implementation: Included\n      - Training: Basic training included\n      `}\n\n      Additional Benefits:\n      - Free setup and configuration\n      - Regular system updates\n      - Security patches\n      - Performance monitoring\n      - Backup services\n\n      Next Steps:\n      1. Review the quotation\n      2. Sign and return the acceptance form\n      3. Our team will contact you to schedule implementation\n      4. Begin your ExcelyTech journey!\n\n      For any questions or clarifications, please don't hesitate to contact us.\n\n      Best regards,\n      ExcelyTech Sales Team\n      Email: sales@excelytech.com\n      Phone: +1 (555) 123-4567\n    `;\n    return await sendEmail({\n      to_email: data.to_email,\n      subject: `ExcelyTech Quotation - ${data.companyName}`,\n      message\n    });\n  } catch (error) {\n    console.error('Error sending ExcelyTech quotation:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["emailjs","getLoyaltyTier","getUpsellOpportunities","getProfitOptimizationRecommendations","generateFeeReport","calculateFeeSavings","getRecommendations","calculateTotalCost","formatCurrency","init","process","env","REACT_APP_EMAILJS_PUBLIC_KEY","sendEmail","data","templateParams","to_email","subject","message","response","send","REACT_APP_EMAILJS_SERVICE_ID","REACT_APP_EMAILJS_TEMPLATE_ID","error","console","sendPricingRecommendations","loyaltyTier","totalSpend","upsellOpportunities","products","commitmentLevel","profitRecommendations","feeReport","amount","monthlyVolume","feeSavings","recommendations","serviceFee","profitBeforeTax","customerName","name","toFixed","summary","map","rec","join","opp","description","sendCommitmentOptimization","currentCommitment","recommendedCommitment","savings","annual","processingFees","serviceFees","additionalBenefits","sendExcelyTechQuotation","quotationDate","Date","toLocaleDateString","validUntil","setDate","getDate","totalCost","reduce","sum","p","quantity","isAnnual","total","now","toString","slice","companyName","unitPrice","subtotal","volumeDiscount","commitmentDiscount","FINANCIAL_CONSTANTS","TAX_RATE","tax","terms","Object","entries","key","value"],"sources":["C:/Users/Hasan/Desktop/vscode/etcalc/src/utils/emailService.js"],"sourcesContent":["import emailjs from '@emailjs/browser';\r\nimport { \r\n  getLoyaltyTier, \r\n  getUpsellOpportunities, \r\n  getProfitOptimizationRecommendations,\r\n  generateFeeReport,\r\n  calculateFeeSavings,\r\n  getRecommendations,\r\n  calculateTotalCost,\r\n  formatCurrency\r\n} from './pricing';\r\n\r\n// Initialize EmailJS with your public key\r\nemailjs.init(process.env.REACT_APP_EMAILJS_PUBLIC_KEY);\r\n\r\n/**\r\n * Send an email using EmailJS\r\n * @param {Object} data - The email data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.subject - Email subject\r\n * @param {string} data.message - Email message content\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\r\nexport const sendEmail = async (data) => {\r\n  try {\r\n    const templateParams = {\r\n      to_email: data.to_email,\r\n      subject: data.subject,\r\n      message: data.message,\r\n    };\r\n\r\n    const response = await emailjs.send(\r\n      process.env.REACT_APP_EMAILJS_SERVICE_ID,\r\n      process.env.REACT_APP_EMAILJS_TEMPLATE_ID,\r\n      templateParams\r\n    );\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error sending email:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Send personalized pricing recommendations email\r\n * @param {Object} data - Customer and pricing data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.customerName - Customer's name\r\n * @param {Array} data.products - Current products\r\n * @param {number} data.totalSpend - Total customer spend\r\n * @param {number} data.monthlyVolume - Monthly transaction volume\r\n * @param {string} data.commitmentLevel - Current commitment level\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\r\nexport const sendPricingRecommendations = async (data) => {\r\n  try {\r\n    const loyaltyTier = getLoyaltyTier(data.totalSpend);\r\n    const upsellOpportunities = getUpsellOpportunities(\r\n      data.products,\r\n      data.commitmentLevel,\r\n      data.totalSpend\r\n    );\r\n    const profitRecommendations = getProfitOptimizationRecommendations(\r\n      data.products,\r\n      data.commitmentLevel,\r\n      data.totalSpend\r\n    );\r\n    const feeReport = generateFeeReport(\r\n      { amount: data.totalSpend },\r\n      data.monthlyVolume,\r\n      data.totalSpend\r\n    );\r\n    const feeSavings = calculateFeeSavings(\r\n      { amount: data.totalSpend },\r\n      data.monthlyVolume,\r\n      data.totalSpend\r\n    );\r\n    const recommendations = getRecommendations(\r\n      data.products,\r\n      feeReport.serviceFee,\r\n      data.commitmentLevel,\r\n      feeReport.profitBeforeTax,\r\n      data.totalSpend,\r\n      data.monthlyVolume\r\n    );\r\n\r\n    const message = `\r\n      Dear ${data.customerName},\r\n\r\n      We've analyzed your account and have some personalized recommendations to help you optimize your costs and maximize benefits:\r\n\r\n      Current Status:\r\n      - Loyalty Tier: ${loyaltyTier.name}\r\n      - Total Spend: $${data.totalSpend.toFixed(2)}\r\n      - Monthly Volume: $${data.monthlyVolume.toFixed(2)}\r\n\r\n      Fee Analysis:\r\n      ${feeReport.summary}\r\n\r\n      Potential Savings:\r\n      ${feeSavings.summary}\r\n\r\n      Recommended Actions:\r\n      ${recommendations.map(rec => `- ${rec}`).join('\\n')}\r\n\r\n      Upsell Opportunities:\r\n      ${upsellOpportunities.map(opp => `- ${opp.name}: ${opp.description}`).join('\\n')}\r\n\r\n      Profit Optimization:\r\n      ${profitRecommendations.map(rec => `- ${rec}`).join('\\n')}\r\n\r\n      Would you like to discuss any of these recommendations in detail? Our team is ready to help you implement these optimizations.\r\n\r\n      Best regards,\r\n      Your Pricing Optimization Team\r\n    `;\r\n\r\n    return await sendEmail({\r\n      to_email: data.to_email,\r\n      subject: `Personalized Pricing Recommendations for ${data.customerName}`,\r\n      message\r\n    });\r\n  } catch (error) {\r\n    console.error('Error sending pricing recommendations:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Send commitment optimization email\r\n * @param {Object} data - Customer and commitment data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.customerName - Customer's name\r\n * @param {string} data.currentCommitment - Current commitment level\r\n * @param {string} data.recommendedCommitment - Recommended commitment level\r\n * @param {Object} data.savings - Potential savings details\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\r\nexport const sendCommitmentOptimization = async (data) => {\r\n  try {\r\n    const message = `\r\n      Dear ${data.customerName},\r\n\r\n      We've identified an opportunity to optimize your commitment level and increase your savings:\r\n\r\n      Current Commitment: ${data.currentCommitment}\r\n      Recommended Commitment: ${data.recommendedCommitment}\r\n\r\n      Potential Benefits:\r\n      - Annual Savings: $${data.savings.annual.toFixed(2)}\r\n      - Processing Fee Savings: $${data.savings.processingFees.toFixed(2)}\r\n      - Service Fee Savings: $${data.savings.serviceFees.toFixed(2)}\r\n      - Additional Benefits: ${data.savings.additionalBenefits.join(', ')}\r\n\r\n      Would you like to discuss upgrading your commitment level? Our team is available to help you make this transition smoothly.\r\n\r\n      Best regards,\r\n      Your Commitment Optimization Team\r\n    `;\r\n\r\n    return await sendEmail({\r\n      to_email: data.to_email,\r\n      subject: `Commitment Optimization Opportunity for ${data.customerName}`,\r\n      message\r\n    });\r\n  } catch (error) {\r\n    console.error('Error sending commitment optimization:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Send ExcelyTech quotation email\r\n * @param {Object} data - Quotation data\r\n * @param {string} data.to_email - Recipient's email address\r\n * @param {string} data.customerName - Customer's name\r\n * @param {string} data.companyName - Company name\r\n * @param {Array} data.products - Array of products with quantities\r\n * @param {string} data.commitmentLevel - Commitment level (MONTHLY, QUARTERLY, etc.)\r\n * @param {boolean} data.isAnnual - Whether the quotation is for annual billing\r\n * @param {number} data.monthlyVolume - Monthly transaction volume\r\n * @param {number} data.totalSpend - Total customer spend\r\n * @param {Object} data.terms - Additional terms and conditions\r\n * @returns {Promise} - Promise that resolves when email is sent\r\n */\r\nexport const sendExcelyTechQuotation = async (data) => {\r\n  try {\r\n    const quotationDate = new Date().toLocaleDateString();\r\n    const validUntil = new Date();\r\n    validUntil.setDate(validUntil.getDate() + 30); // Valid for 30 days\r\n\r\n    const totalCost = calculateTotalCost(\r\n      data.products,\r\n      data.products.reduce((sum, p) => sum + p.quantity, 0),\r\n      data.isAnnual,\r\n      false,\r\n      data.monthlyVolume,\r\n      data.totalSpend\r\n    );\r\n\r\n    const loyaltyTier = getLoyaltyTier(data.totalSpend);\r\n    const feeReport = generateFeeReport(\r\n      { amount: totalCost.total },\r\n      data.monthlyVolume,\r\n      data.totalSpend\r\n    );\r\n\r\n    const message = `\r\n      Dear ${data.customerName},\r\n\r\n      Thank you for your interest in ExcelyTech's services. Please find below your detailed quotation:\r\n\r\n      Quotation Details:\r\n      - Date: ${quotationDate}\r\n      - Valid Until: ${validUntil.toLocaleDateString()}\r\n      - Quotation Reference: ETQ-${Date.now().toString().slice(-6)}\r\n      - Commitment Level: ${data.commitmentLevel}\r\n      - Billing Cycle: ${data.isAnnual ? 'Annual' : 'Monthly'}\r\n\r\n      Customer Information:\r\n      - Company: ${data.companyName}\r\n      - Loyalty Tier: ${loyaltyTier.name}\r\n\r\n      Products & Services:\r\n      ${data.products.map(p => `\r\n        ${p.name}\r\n        - Quantity: ${p.quantity}\r\n        - Unit Price: ${formatCurrency(p.unitPrice)}\r\n        - Subtotal: ${formatCurrency(p.unitPrice * p.quantity)}\r\n      `).join('\\n')}\r\n\r\n      Cost Breakdown:\r\n      - Subtotal: ${formatCurrency(totalCost.subtotal)}\r\n      - Processing Fees: ${formatCurrency(totalCost.processingFees)}\r\n      - Service Fees: ${formatCurrency(feeReport.serviceFee)}\r\n      - Volume Discount: ${formatCurrency(totalCost.volumeDiscount)}\r\n      - Commitment Discount: ${formatCurrency(totalCost.commitmentDiscount)}\r\n      - Tax (${(FINANCIAL_CONSTANTS.TAX_RATE * 100).toFixed(1)}%): ${formatCurrency(totalCost.tax)}\r\n      - Total Amount: ${formatCurrency(totalCost.total)}\r\n\r\n      Terms & Conditions:\r\n      ${data.terms ? Object.entries(data.terms).map(([key, value]) => `- ${key}: ${value}`).join('\\n') : `\r\n      - Payment Terms: Net 30\r\n      - Service Level Agreement: 99.9% Uptime\r\n      - Support: 24/7 Technical Support\r\n      - Implementation: Included\r\n      - Training: Basic training included\r\n      `}\r\n\r\n      Additional Benefits:\r\n      - Free setup and configuration\r\n      - Regular system updates\r\n      - Security patches\r\n      - Performance monitoring\r\n      - Backup services\r\n\r\n      Next Steps:\r\n      1. Review the quotation\r\n      2. Sign and return the acceptance form\r\n      3. Our team will contact you to schedule implementation\r\n      4. Begin your ExcelyTech journey!\r\n\r\n      For any questions or clarifications, please don't hesitate to contact us.\r\n\r\n      Best regards,\r\n      ExcelyTech Sales Team\r\n      Email: sales@excelytech.com\r\n      Phone: +1 (555) 123-4567\r\n    `;\r\n\r\n    return await sendEmail({\r\n      to_email: data.to_email,\r\n      subject: `ExcelyTech Quotation - ${data.companyName}`,\r\n      message\r\n    });\r\n  } catch (error) {\r\n    console.error('Error sending ExcelyTech quotation:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}